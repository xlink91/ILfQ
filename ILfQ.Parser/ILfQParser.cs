//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: null
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR null C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g 2019-12-06 15:22:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using Antlr.Runtime;


using Antlr.Runtime.Tree;

namespace ILfQ.Parser
{
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "null")]
    [System.CLSCompliant(false)]
    public partial class ILfQParser : Antlr.Runtime.Parser
    {
        internal static readonly string[] tokenNames = new string[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHAR", "CLOSED_BRACKET", "CLOSED_PAR", "COMMENT", "ESC_SEQ", "EXPONENT", "FLOAT", "HEX_DIGIT", "ID", "INT", "OCTAL_ESC", "OPEN_BRACKET", "OPEN_PAR", "STRING", "UNICODE_ESC", "WS", "'$and'", "'$eq'", "'$gt'", "'$gte'", "'$in'", "'$lt'", "'$lte'", "'$ne'", "'$nin'", "'$nor'", "'$not'", "'$options'", "'$or'", "'$regex'", "'('", "')'", "','", "':'", "'false'", "'null'", "'true'"
    };
        public const int EOF = -1;
        public const int T__20 = 20;
        public const int T__21 = 21;
        public const int T__22 = 22;
        public const int T__23 = 23;
        public const int T__24 = 24;
        public const int T__25 = 25;
        public const int T__26 = 26;
        public const int T__27 = 27;
        public const int T__28 = 28;
        public const int T__29 = 29;
        public const int T__30 = 30;
        public const int T__31 = 31;
        public const int T__32 = 32;
        public const int T__33 = 33;
        public const int T__34 = 34;
        public const int T__35 = 35;
        public const int T__36 = 36;
        public const int T__37 = 37;
        public const int T__38 = 38;
        public const int T__39 = 39;
        public const int T__40 = 40;
        public const int CHAR = 4;
        public const int CLOSED_BRACKET = 5;
        public const int CLOSED_PAR = 6;
        public const int COMMENT = 7;
        public const int ESC_SEQ = 8;
        public const int EXPONENT = 9;
        public const int FLOAT = 10;
        public const int HEX_DIGIT = 11;
        public const int ID = 12;
        public const int INT = 13;
        public const int OCTAL_ESC = 14;
        public const int OPEN_BRACKET = 15;
        public const int OPEN_PAR = 16;
        public const int STRING = 17;
        public const int UNICODE_ESC = 18;
        public const int WS = 19;

        public ILfQParser(ITokenStream input)
            : this(input, new RecognizerSharedState())
        {
        }
        public ILfQParser(ITokenStream input, RecognizerSharedState state)
            : base(input, state)
        {
            ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
            CreateTreeAdaptor(ref treeAdaptor);
            TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
            OnCreated();
        }
        // Implement this function in your helper file to use a custom tree adaptor
        partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

        private ITreeAdaptor adaptor;

        public ITreeAdaptor TreeAdaptor
        {
            get
            {
                return adaptor;
            }

            set
            {
                this.adaptor = value;
            }
        }

        public override string[] TokenNames { get { return ILfQParser.tokenNames; } }
        public override string GrammarFileName { get { return "C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g"; } }


        partial void OnCreated();
        partial void EnterRule(string ruleName, int ruleIndex);
        partial void LeaveRule(string ruleName, int ruleIndex);

        #region Rules
        partial void EnterRule_constant_values();
        partial void LeaveRule_constant_values();
        // $ANTLR start "constant_values"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:74:1: constant_values : ( STRING | INT | FLOAT | 'null' | 'false' | 'true' | ID ^ '(' ! constant_values ')' !);
        [GrammarRule("constant_values")]
        private AstParserRuleReturnScope<object, IToken> constant_values()
        {
            EnterRule_constant_values();
            EnterRule("constant_values", 1);
            TraceIn("constant_values", 1);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken STRING1 = default(IToken);
            IToken INT2 = default(IToken);
            IToken FLOAT3 = default(IToken);
            IToken string_literal4 = default(IToken);
            IToken string_literal5 = default(IToken);
            IToken string_literal6 = default(IToken);
            IToken ID7 = default(IToken);
            IToken char_literal8 = default(IToken);
            IToken char_literal10 = default(IToken);
            AstParserRuleReturnScope<object, IToken> constant_values9 = default(AstParserRuleReturnScope<object, IToken>);

            object STRING1_tree = default(object);
            object INT2_tree = default(object);
            object FLOAT3_tree = default(object);
            object string_literal4_tree = default(object);
            object string_literal5_tree = default(object);
            object string_literal6_tree = default(object);
            object ID7_tree = default(object);
            object char_literal8_tree = default(object);
            object char_literal10_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "constant_values");
                DebugLocation(74, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:75:2: ( STRING | INT | FLOAT | 'null' | 'false' | 'true' | ID ^ '(' ! constant_values ')' !)
                    int alt1 = 7;
                    try
                    {
                        DebugEnterDecision(1, false);
                        switch (input.LA(1))
                        {
                            case STRING:
                                {
                                    alt1 = 1;
                                }
                                break;
                            case INT:
                                {
                                    alt1 = 2;
                                }
                                break;
                            case FLOAT:
                                {
                                    alt1 = 3;
                                }
                                break;
                            case 39:
                                {
                                    alt1 = 4;
                                }
                                break;
                            case 38:
                                {
                                    alt1 = 5;
                                }
                                break;
                            case 40:
                                {
                                    alt1 = 6;
                                }
                                break;
                            case ID:
                                {
                                    alt1 = 7;
                                }
                                break;
                            default:
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                        }

                    }
                    finally { DebugExitDecision(1); }
                    switch (alt1)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:75:5: STRING
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(75, 5);
                                STRING1 = (IToken)Match(input, STRING, Follow._STRING_in_constant_values620);
                                STRING1_tree = (object)adaptor.Create(STRING1);
                                adaptor.AddChild(root_0, STRING1_tree);

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:75:14: INT
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(75, 14);
                                INT2 = (IToken)Match(input, INT, Follow._INT_in_constant_values624);
                                INT2_tree = (object)adaptor.Create(INT2);
                                adaptor.AddChild(root_0, INT2_tree);

                            }
                            break;
                        case 3:
                            DebugEnterAlt(3);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:75:20: FLOAT
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(75, 20);
                                FLOAT3 = (IToken)Match(input, FLOAT, Follow._FLOAT_in_constant_values628);
                                FLOAT3_tree = (object)adaptor.Create(FLOAT3);
                                adaptor.AddChild(root_0, FLOAT3_tree);

                            }
                            break;
                        case 4:
                            DebugEnterAlt(4);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:75:28: 'null'
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(75, 28);
                                string_literal4 = (IToken)Match(input, 39, Follow._39_in_constant_values632);
                                string_literal4_tree = (object)adaptor.Create(string_literal4);
                                adaptor.AddChild(root_0, string_literal4_tree);

                            }
                            break;
                        case 5:
                            DebugEnterAlt(5);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:75:37: 'false'
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(75, 37);
                                string_literal5 = (IToken)Match(input, 38, Follow._38_in_constant_values636);
                                string_literal5_tree = (object)adaptor.Create(string_literal5);
                                adaptor.AddChild(root_0, string_literal5_tree);

                            }
                            break;
                        case 6:
                            DebugEnterAlt(6);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:75:47: 'true'
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(75, 47);
                                string_literal6 = (IToken)Match(input, 40, Follow._40_in_constant_values640);
                                string_literal6_tree = (object)adaptor.Create(string_literal6);
                                adaptor.AddChild(root_0, string_literal6_tree);

                            }
                            break;
                        case 7:
                            DebugEnterAlt(7);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:75:56: ID ^ '(' ! constant_values ')' !
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(75, 58);
                                ID7 = (IToken)Match(input, ID, Follow._ID_in_constant_values644);
                                ID7_tree = (object)adaptor.Create(ID7);
                                root_0 = (object)adaptor.BecomeRoot(ID7_tree, root_0);
                                DebugLocation(75, 63);
                                char_literal8 = (IToken)Match(input, 34, Follow._34_in_constant_values647);
                                DebugLocation(75, 65);
                                PushFollow(Follow._constant_values_in_constant_values650);
                                constant_values9 = constant_values();
                                PopFollow();

                                adaptor.AddChild(root_0, constant_values9.Tree);
                                DebugLocation(75, 84);
                                char_literal10 = (IToken)Match(input, 35, Follow._35_in_constant_values652);

                            }
                            break;

                    }
                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("constant_values", 1);
                    LeaveRule("constant_values", 1);
                    LeaveRule_constant_values();
                }
                DebugLocation(76, 1);
            }
            finally { DebugExitRule(GrammarFileName, "constant_values"); }
            return retval;

        }
        // $ANTLR end "constant_values"

        partial void EnterRule_comparison_operator();
        partial void LeaveRule_comparison_operator();
        // $ANTLR start "comparison_operator"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:78:1: comparison_operator : ( '$eq' | '$gt' | '$gte' | '$in' | '$lt' | '$lte' | '$ne' | '$nin' );
        [GrammarRule("comparison_operator")]
        private AstParserRuleReturnScope<object, IToken> comparison_operator()
        {
            EnterRule_comparison_operator();
            EnterRule("comparison_operator", 2);
            TraceIn("comparison_operator", 2);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken set11 = default(IToken);

            object set11_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "comparison_operator");
                DebugLocation(78, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:79:2: ( '$eq' | '$gt' | '$gte' | '$in' | '$lt' | '$lte' | '$ne' | '$nin' )
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                    {
                        root_0 = (object)adaptor.Nil();

                        DebugLocation(79, 2);

                        set11 = (IToken)input.LT(1);
                        if ((input.LA(1) >= 21 && input.LA(1) <= 28))
                        {
                            input.Consume();
                            adaptor.AddChild(root_0, (object)adaptor.Create(set11));
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("comparison_operator", 2);
                    LeaveRule("comparison_operator", 2);
                    LeaveRule_comparison_operator();
                }
                DebugLocation(80, 1);
            }
            finally { DebugExitRule(GrammarFileName, "comparison_operator"); }
            return retval;

        }
        // $ANTLR end "comparison_operator"

        partial void EnterRule_aux_operator();
        partial void LeaveRule_aux_operator();
        // $ANTLR start "aux_operator"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:82:1: aux_operator : '$options' ;
        [GrammarRule("aux_operator")]
        private AstParserRuleReturnScope<object, IToken> aux_operator()
        {
            EnterRule_aux_operator();
            EnterRule("aux_operator", 3);
            TraceIn("aux_operator", 3);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken string_literal12 = default(IToken);

            object string_literal12_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "aux_operator");
                DebugLocation(82, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:83:2: ( '$options' )
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:83:4: '$options'
                    {
                        root_0 = (object)adaptor.Nil();

                        DebugLocation(83, 4);
                        string_literal12 = (IToken)Match(input, 31, Follow._31_in_aux_operator703);
                        string_literal12_tree = (object)adaptor.Create(string_literal12);
                        adaptor.AddChild(root_0, string_literal12_tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("aux_operator", 3);
                    LeaveRule("aux_operator", 3);
                    LeaveRule_aux_operator();
                }
                DebugLocation(84, 1);
            }
            finally { DebugExitRule(GrammarFileName, "aux_operator"); }
            return retval;

        }
        // $ANTLR end "aux_operator"

        partial void EnterRule_logical_operator();
        partial void LeaveRule_logical_operator();
        // $ANTLR start "logical_operator"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:86:1: logical_operator : ( '$and' | '$not' | '$nor' | '$or' );
        [GrammarRule("logical_operator")]
        private AstParserRuleReturnScope<object, IToken> logical_operator()
        {
            EnterRule_logical_operator();
            EnterRule("logical_operator", 4);
            TraceIn("logical_operator", 4);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken set13 = default(IToken);

            object set13_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "logical_operator");
                DebugLocation(86, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:87:2: ( '$and' | '$not' | '$nor' | '$or' )
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                    {
                        root_0 = (object)adaptor.Nil();

                        DebugLocation(87, 2);

                        set13 = (IToken)input.LT(1);
                        if (input.LA(1) == 20 || (input.LA(1) >= 29 && input.LA(1) <= 30) || input.LA(1) == 32)
                        {
                            input.Consume();
                            adaptor.AddChild(root_0, (object)adaptor.Create(set13));
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("logical_operator", 4);
                    LeaveRule("logical_operator", 4);
                    LeaveRule_logical_operator();
                }
                DebugLocation(88, 1);
            }
            finally { DebugExitRule(GrammarFileName, "logical_operator"); }
            return retval;

        }
        // $ANTLR end "logical_operator"

        partial void EnterRule_evaluation_operator();
        partial void LeaveRule_evaluation_operator();
        // $ANTLR start "evaluation_operator"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:90:1: evaluation_operator : '$regex' ;
        [GrammarRule("evaluation_operator")]
        private AstParserRuleReturnScope<object, IToken> evaluation_operator()
        {
            EnterRule_evaluation_operator();
            EnterRule("evaluation_operator", 5);
            TraceIn("evaluation_operator", 5);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken string_literal14 = default(IToken);

            object string_literal14_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "evaluation_operator");
                DebugLocation(90, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:91:2: ( '$regex' )
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:91:4: '$regex'
                    {
                        root_0 = (object)adaptor.Nil();

                        DebugLocation(91, 4);
                        string_literal14 = (IToken)Match(input, 33, Follow._33_in_evaluation_operator739);
                        string_literal14_tree = (object)adaptor.Create(string_literal14);
                        adaptor.AddChild(root_0, string_literal14_tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("evaluation_operator", 5);
                    LeaveRule("evaluation_operator", 5);
                    LeaveRule_evaluation_operator();
                }
                DebugLocation(92, 1);
            }
            finally { DebugExitRule(GrammarFileName, "evaluation_operator"); }
            return retval;

        }
        // $ANTLR end "evaluation_operator"

        partial void EnterRule_comparison_exp();
        partial void LeaveRule_comparison_exp();
        // $ANTLR start "comparison_exp"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:94:1: comparison_exp : OPEN_PAR ! comparison_operator ^ ':' ! ( constant_values | bracket_exp ) CLOSED_PAR !;
        [GrammarRule("comparison_exp")]
        private AstParserRuleReturnScope<object, IToken> comparison_exp()
        {
            EnterRule_comparison_exp();
            EnterRule("comparison_exp", 6);
            TraceIn("comparison_exp", 6);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken OPEN_PAR15 = default(IToken);
            IToken char_literal17 = default(IToken);
            IToken CLOSED_PAR20 = default(IToken);
            AstParserRuleReturnScope<object, IToken> comparison_operator16 = default(AstParserRuleReturnScope<object, IToken>);
            AstParserRuleReturnScope<object, IToken> constant_values18 = default(AstParserRuleReturnScope<object, IToken>);
            AstParserRuleReturnScope<object, IToken> bracket_exp19 = default(AstParserRuleReturnScope<object, IToken>);

            object OPEN_PAR15_tree = default(object);
            object char_literal17_tree = default(object);
            object CLOSED_PAR20_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "comparison_exp");
                DebugLocation(94, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:95:2: ( OPEN_PAR ! comparison_operator ^ ':' ! ( constant_values | bracket_exp ) CLOSED_PAR !)
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:95:4: OPEN_PAR ! comparison_operator ^ ':' ! ( constant_values | bracket_exp ) CLOSED_PAR !
                    {
                        root_0 = (object)adaptor.Nil();

                        DebugLocation(95, 12);
                        OPEN_PAR15 = (IToken)Match(input, OPEN_PAR, Follow._OPEN_PAR_in_comparison_exp750);
                        DebugLocation(95, 33);
                        PushFollow(Follow._comparison_operator_in_comparison_exp753);
                        comparison_operator16 = comparison_operator();
                        PopFollow();

                        root_0 = (object)adaptor.BecomeRoot(comparison_operator16.Tree, root_0);
                        DebugLocation(95, 38);
                        char_literal17 = (IToken)Match(input, 37, Follow._37_in_comparison_exp756);
                        DebugLocation(95, 40);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:95:40: ( constant_values | bracket_exp )
                        int alt2 = 2;
                        try
                        {
                            DebugEnterSubRule(2);
                            try
                            {
                                DebugEnterDecision(2, false);
                                int LA2_1 = input.LA(1);

                                if ((LA2_1 == FLOAT || (LA2_1 >= ID && LA2_1 <= INT) || LA2_1 == STRING || (LA2_1 >= 38 && LA2_1 <= 40)))
                                {
                                    alt2 = 1;
                                }
                                else if ((LA2_1 == OPEN_BRACKET))
                                {
                                    alt2 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(2); }
                            switch (alt2)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:95:41: constant_values
                                    {
                                        DebugLocation(95, 41);
                                        PushFollow(Follow._constant_values_in_comparison_exp760);
                                        constant_values18 = constant_values();
                                        PopFollow();

                                        adaptor.AddChild(root_0, constant_values18.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:95:59: bracket_exp
                                    {
                                        DebugLocation(95, 59);
                                        PushFollow(Follow._bracket_exp_in_comparison_exp764);
                                        bracket_exp19 = bracket_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, bracket_exp19.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(2); }

                        DebugLocation(95, 82);
                        CLOSED_PAR20 = (IToken)Match(input, CLOSED_PAR, Follow._CLOSED_PAR_in_comparison_exp767);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("comparison_exp", 6);
                    LeaveRule("comparison_exp", 6);
                    LeaveRule_comparison_exp();
                }
                DebugLocation(96, 1);
            }
            finally { DebugExitRule(GrammarFileName, "comparison_exp"); }
            return retval;

        }
        // $ANTLR end "comparison_exp"

        partial void EnterRule_logical_exp();
        partial void LeaveRule_logical_exp();
        // $ANTLR start "logical_exp"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:98:1: logical_exp : OPEN_PAR ! logical_operator ^ ':' ! bracket_exp CLOSED_PAR !;
        [GrammarRule("logical_exp")]
        private AstParserRuleReturnScope<object, IToken> logical_exp()
        {
            EnterRule_logical_exp();
            EnterRule("logical_exp", 7);
            TraceIn("logical_exp", 7);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken OPEN_PAR21 = default(IToken);
            IToken char_literal23 = default(IToken);
            IToken CLOSED_PAR25 = default(IToken);
            AstParserRuleReturnScope<object, IToken> logical_operator22 = default(AstParserRuleReturnScope<object, IToken>);
            AstParserRuleReturnScope<object, IToken> bracket_exp24 = default(AstParserRuleReturnScope<object, IToken>);

            object OPEN_PAR21_tree = default(object);
            object char_literal23_tree = default(object);
            object CLOSED_PAR25_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "logical_exp");
                DebugLocation(98, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:99:2: ( OPEN_PAR ! logical_operator ^ ':' ! bracket_exp CLOSED_PAR !)
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:99:4: OPEN_PAR ! logical_operator ^ ':' ! bracket_exp CLOSED_PAR !
                    {
                        root_0 = (object)adaptor.Nil();

                        DebugLocation(99, 12);
                        OPEN_PAR21 = (IToken)Match(input, OPEN_PAR, Follow._OPEN_PAR_in_logical_exp780);
                        DebugLocation(99, 30);
                        PushFollow(Follow._logical_operator_in_logical_exp783);
                        logical_operator22 = logical_operator();
                        PopFollow();

                        root_0 = (object)adaptor.BecomeRoot(logical_operator22.Tree, root_0);
                        DebugLocation(99, 35);
                        char_literal23 = (IToken)Match(input, 37, Follow._37_in_logical_exp786);
                        DebugLocation(99, 37);
                        PushFollow(Follow._bracket_exp_in_logical_exp789);
                        bracket_exp24 = bracket_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, bracket_exp24.Tree);
                        DebugLocation(99, 59);
                        CLOSED_PAR25 = (IToken)Match(input, CLOSED_PAR, Follow._CLOSED_PAR_in_logical_exp791);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("logical_exp", 7);
                    LeaveRule("logical_exp", 7);
                    LeaveRule_logical_exp();
                }
                DebugLocation(100, 1);
            }
            finally { DebugExitRule(GrammarFileName, "logical_exp"); }
            return retval;

        }
        // $ANTLR end "logical_exp"

        partial void EnterRule_evaluation_exp();
        partial void LeaveRule_evaluation_exp();
        // $ANTLR start "evaluation_exp"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:102:1: evaluation_exp : OPEN_PAR ! evaluation_operator ^ ':' ! STRING CLOSED_PAR !;
        [GrammarRule("evaluation_exp")]
        private AstParserRuleReturnScope<object, IToken> evaluation_exp()
        {
            EnterRule_evaluation_exp();
            EnterRule("evaluation_exp", 8);
            TraceIn("evaluation_exp", 8);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken OPEN_PAR26 = default(IToken);
            IToken char_literal28 = default(IToken);
            IToken STRING29 = default(IToken);
            IToken CLOSED_PAR30 = default(IToken);
            AstParserRuleReturnScope<object, IToken> evaluation_operator27 = default(AstParserRuleReturnScope<object, IToken>);

            object OPEN_PAR26_tree = default(object);
            object char_literal28_tree = default(object);
            object STRING29_tree = default(object);
            object CLOSED_PAR30_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "evaluation_exp");
                DebugLocation(102, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:103:2: ( OPEN_PAR ! evaluation_operator ^ ':' ! STRING CLOSED_PAR !)
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:103:4: OPEN_PAR ! evaluation_operator ^ ':' ! STRING CLOSED_PAR !
                    {
                        root_0 = (object)adaptor.Nil();

                        DebugLocation(103, 12);
                        OPEN_PAR26 = (IToken)Match(input, OPEN_PAR, Follow._OPEN_PAR_in_evaluation_exp803);
                        DebugLocation(103, 33);
                        PushFollow(Follow._evaluation_operator_in_evaluation_exp806);
                        evaluation_operator27 = evaluation_operator();
                        PopFollow();

                        root_0 = (object)adaptor.BecomeRoot(evaluation_operator27.Tree, root_0);
                        DebugLocation(103, 38);
                        char_literal28 = (IToken)Match(input, 37, Follow._37_in_evaluation_exp809);
                        DebugLocation(103, 40);
                        STRING29 = (IToken)Match(input, STRING, Follow._STRING_in_evaluation_exp812);
                        STRING29_tree = (object)adaptor.Create(STRING29);
                        adaptor.AddChild(root_0, STRING29_tree);
                        DebugLocation(103, 57);
                        CLOSED_PAR30 = (IToken)Match(input, CLOSED_PAR, Follow._CLOSED_PAR_in_evaluation_exp814);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("evaluation_exp", 8);
                    LeaveRule("evaluation_exp", 8);
                    LeaveRule_evaluation_exp();
                }
                DebugLocation(104, 1);
            }
            finally { DebugExitRule(GrammarFileName, "evaluation_exp"); }
            return retval;

        }
        // $ANTLR end "evaluation_exp"

        partial void EnterRule_property_exp();
        partial void LeaveRule_property_exp();
        // $ANTLR start "property_exp"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:106:1: property_exp : OPEN_PAR ! ( ID | STRING ) ^ ':' ! exp_term CLOSED_PAR !;
        [GrammarRule("property_exp")]
        private AstParserRuleReturnScope<object, IToken> property_exp()
        {
            EnterRule_property_exp();
            EnterRule("property_exp", 9);
            TraceIn("property_exp", 9);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken OPEN_PAR31 = default(IToken);
            IToken set32 = default(IToken);
            IToken char_literal33 = default(IToken);
            IToken CLOSED_PAR35 = default(IToken);
            AstParserRuleReturnScope<object, IToken> exp_term34 = default(AstParserRuleReturnScope<object, IToken>);

            object OPEN_PAR31_tree = default(object);
            object set32_tree = default(object);
            object char_literal33_tree = default(object);
            object CLOSED_PAR35_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "property_exp");
                DebugLocation(106, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:107:2: ( OPEN_PAR ! ( ID | STRING ) ^ ':' ! exp_term CLOSED_PAR !)
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:107:4: OPEN_PAR ! ( ID | STRING ) ^ ':' ! exp_term CLOSED_PAR !
                    {
                        root_0 = (object)adaptor.Nil();

                        DebugLocation(107, 12);
                        OPEN_PAR31 = (IToken)Match(input, OPEN_PAR, Follow._OPEN_PAR_in_property_exp826);
                        DebugLocation(107, 27);

                        set32 = (IToken)input.LT(1);
                        set32 = (IToken)input.LT(1);
                        if (input.LA(1) == ID || input.LA(1) == STRING)
                        {
                            input.Consume();
                            root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set32), root_0);
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }

                        DebugLocation(107, 32);
                        char_literal33 = (IToken)Match(input, 37, Follow._37_in_property_exp838);
                        DebugLocation(107, 35);
                        PushFollow(Follow._exp_term_in_property_exp842);
                        exp_term34 = exp_term();
                        PopFollow();

                        adaptor.AddChild(root_0, exp_term34.Tree);
                        DebugLocation(107, 54);
                        CLOSED_PAR35 = (IToken)Match(input, CLOSED_PAR, Follow._CLOSED_PAR_in_property_exp844);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("property_exp", 9);
                    LeaveRule("property_exp", 9);
                    LeaveRule_property_exp();
                }
                DebugLocation(108, 1);
            }
            finally { DebugExitRule(GrammarFileName, "property_exp"); }
            return retval;

        }
        // $ANTLR end "property_exp"

        partial void EnterRule_bracket_exp();
        partial void LeaveRule_bracket_exp();
        // $ANTLR start "bracket_exp"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:110:1: bracket_exp : OPEN_BRACKET ! exp_term ( ',' ! exp_term )* CLOSED_BRACKET !;
        [GrammarRule("bracket_exp")]
        private AstParserRuleReturnScope<object, IToken> bracket_exp()
        {
            EnterRule_bracket_exp();
            EnterRule("bracket_exp", 10);
            TraceIn("bracket_exp", 10);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken OPEN_BRACKET36 = default(IToken);
            IToken char_literal38 = default(IToken);
            IToken CLOSED_BRACKET40 = default(IToken);
            AstParserRuleReturnScope<object, IToken> exp_term37 = default(AstParserRuleReturnScope<object, IToken>);
            AstParserRuleReturnScope<object, IToken> exp_term39 = default(AstParserRuleReturnScope<object, IToken>);

            object OPEN_BRACKET36_tree = default(object);
            object char_literal38_tree = default(object);
            object CLOSED_BRACKET40_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "bracket_exp");
                DebugLocation(110, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:111:2: ( OPEN_BRACKET ! exp_term ( ',' ! exp_term )* CLOSED_BRACKET !)
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:111:4: OPEN_BRACKET ! exp_term ( ',' ! exp_term )* CLOSED_BRACKET !
                    {
                        root_0 = (object)adaptor.Nil();

                        DebugLocation(111, 16);
                        OPEN_BRACKET36 = (IToken)Match(input, OPEN_BRACKET, Follow._OPEN_BRACKET_in_bracket_exp856);
                        DebugLocation(111, 18);
                        PushFollow(Follow._exp_term_in_bracket_exp859);
                        exp_term37 = exp_term();
                        PopFollow();

                        adaptor.AddChild(root_0, exp_term37.Tree);
                        DebugLocation(111, 27);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:111:27: ( ',' ! exp_term )*
                        try
                        {
                            DebugEnterSubRule(3);
                            while (true)
                            {
                                int alt3 = 2;
                                try
                                {
                                    DebugEnterDecision(3, false);
                                    int LA3_1 = input.LA(1);

                                    if ((LA3_1 == 36))
                                    {
                                        alt3 = 1;
                                    }


                                }
                                finally { DebugExitDecision(3); }
                                switch (alt3)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:111:28: ',' ! exp_term
                                        {
                                            DebugLocation(111, 31);
                                            char_literal38 = (IToken)Match(input, 36, Follow._36_in_bracket_exp862);
                                            DebugLocation(111, 33);
                                            PushFollow(Follow._exp_term_in_bracket_exp865);
                                            exp_term39 = exp_term();
                                            PopFollow();

                                            adaptor.AddChild(root_0, exp_term39.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop3;
                                }
                            }

                        loop3:
                            ;

                        }
                        finally { DebugExitSubRule(3); }

                        DebugLocation(111, 58);
                        CLOSED_BRACKET40 = (IToken)Match(input, CLOSED_BRACKET, Follow._CLOSED_BRACKET_in_bracket_exp869);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("bracket_exp", 10);
                    LeaveRule("bracket_exp", 10);
                    LeaveRule_bracket_exp();
                }
                DebugLocation(112, 1);
            }
            finally { DebugExitRule(GrammarFileName, "bracket_exp"); }
            return retval;

        }
        // $ANTLR end "bracket_exp"

        partial void EnterRule_comma_exp();
        partial void LeaveRule_comma_exp();
        // $ANTLR start "comma_exp"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:114:1: comma_exp :;
        [GrammarRule("comma_exp")]
        private AstParserRuleReturnScope<object, IToken> comma_exp()
        {
            EnterRule_comma_exp();
            EnterRule("comma_exp", 11);
            TraceIn("comma_exp", 11);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            try
            {
                DebugEnterRule(GrammarFileName, "comma_exp");
                DebugLocation(114, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:115:2: ()
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:116:2: 
                    {
                        root_0 = (object)adaptor.Nil();

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                finally
                {
                    TraceOut("comma_exp", 11);
                    LeaveRule("comma_exp", 11);
                    LeaveRule_comma_exp();
                }
                DebugLocation(116, 1);
            }
            finally { DebugExitRule(GrammarFileName, "comma_exp"); }
            return retval;

        }
        // $ANTLR end "comma_exp"

        partial void EnterRule_exp_term();
        partial void LeaveRule_exp_term();
        // $ANTLR start "exp_term"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:118:1: exp_term : ( property_exp | comparison_exp | logical_exp | evaluation_exp | STRING | ID | FLOAT | INT | bracket_exp );
        [GrammarRule("exp_term")]
        private AstParserRuleReturnScope<object, IToken> exp_term()
        {
            EnterRule_exp_term();
            EnterRule("exp_term", 12);
            TraceIn("exp_term", 12);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            IToken STRING45 = default(IToken);
            IToken ID46 = default(IToken);
            IToken FLOAT47 = default(IToken);
            IToken INT48 = default(IToken);
            AstParserRuleReturnScope<object, IToken> property_exp41 = default(AstParserRuleReturnScope<object, IToken>);
            AstParserRuleReturnScope<object, IToken> comparison_exp42 = default(AstParserRuleReturnScope<object, IToken>);
            AstParserRuleReturnScope<object, IToken> logical_exp43 = default(AstParserRuleReturnScope<object, IToken>);
            AstParserRuleReturnScope<object, IToken> evaluation_exp44 = default(AstParserRuleReturnScope<object, IToken>);
            AstParserRuleReturnScope<object, IToken> bracket_exp49 = default(AstParserRuleReturnScope<object, IToken>);

            object STRING45_tree = default(object);
            object ID46_tree = default(object);
            object FLOAT47_tree = default(object);
            object INT48_tree = default(object);
            try
            {
                DebugEnterRule(GrammarFileName, "exp_term");
                DebugLocation(118, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:119:2: ( property_exp | comparison_exp | logical_exp | evaluation_exp | STRING | ID | FLOAT | INT | bracket_exp )
                    int alt4 = 9;
                    try
                    {
                        DebugEnterDecision(4, false);
                        switch (input.LA(1))
                        {
                            case OPEN_PAR:
                                {
                                    switch (input.LA(2))
                                    {
                                        case ID:
                                        case STRING:
                                            {
                                                alt4 = 1;
                                            }
                                            break;
                                        case 21:
                                        case 22:
                                        case 23:
                                        case 24:
                                        case 25:
                                        case 26:
                                        case 27:
                                        case 28:
                                            {
                                                alt4 = 2;
                                            }
                                            break;
                                        case 20:
                                        case 29:
                                        case 30:
                                        case 32:
                                            {
                                                alt4 = 3;
                                            }
                                            break;
                                        case 33:
                                            {
                                                alt4 = 4;
                                            }
                                            break;
                                        default:
                                            {
                                                NoViableAltException nvae = new NoViableAltException("", 4, 1, input, 2);
                                                DebugRecognitionException(nvae);
                                                throw nvae;
                                            }
                                    }

                                }
                                break;
                            case STRING:
                                {
                                    alt4 = 5;
                                }
                                break;
                            case ID:
                                {
                                    alt4 = 6;
                                }
                                break;
                            case FLOAT:
                                {
                                    alt4 = 7;
                                }
                                break;
                            case INT:
                                {
                                    alt4 = 8;
                                }
                                break;
                            case OPEN_BRACKET:
                                {
                                    alt4 = 9;
                                }
                                break;
                            default:
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                        }

                    }
                    finally { DebugExitDecision(4); }
                    switch (alt4)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:119:4: property_exp
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(119, 4);
                                PushFollow(Follow._property_exp_in_exp_term892);
                                property_exp41 = property_exp();
                                PopFollow();

                                adaptor.AddChild(root_0, property_exp41.Tree);

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:120:4: comparison_exp
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(120, 4);
                                PushFollow(Follow._comparison_exp_in_exp_term897);
                                comparison_exp42 = comparison_exp();
                                PopFollow();

                                adaptor.AddChild(root_0, comparison_exp42.Tree);

                            }
                            break;
                        case 3:
                            DebugEnterAlt(3);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:121:4: logical_exp
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(121, 4);
                                PushFollow(Follow._logical_exp_in_exp_term902);
                                logical_exp43 = logical_exp();
                                PopFollow();

                                adaptor.AddChild(root_0, logical_exp43.Tree);

                            }
                            break;
                        case 4:
                            DebugEnterAlt(4);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:122:4: evaluation_exp
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(122, 4);
                                PushFollow(Follow._evaluation_exp_in_exp_term907);
                                evaluation_exp44 = evaluation_exp();
                                PopFollow();

                                adaptor.AddChild(root_0, evaluation_exp44.Tree);

                            }
                            break;
                        case 5:
                            DebugEnterAlt(5);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:123:4: STRING
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(123, 4);
                                STRING45 = (IToken)Match(input, STRING, Follow._STRING_in_exp_term912);
                                STRING45_tree = (object)adaptor.Create(STRING45);
                                adaptor.AddChild(root_0, STRING45_tree);

                            }
                            break;
                        case 6:
                            DebugEnterAlt(6);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:123:13: ID
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(123, 13);
                                ID46 = (IToken)Match(input, ID, Follow._ID_in_exp_term916);
                                ID46_tree = (object)adaptor.Create(ID46);
                                adaptor.AddChild(root_0, ID46_tree);

                            }
                            break;
                        case 7:
                            DebugEnterAlt(7);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:123:18: FLOAT
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(123, 18);
                                FLOAT47 = (IToken)Match(input, FLOAT, Follow._FLOAT_in_exp_term920);
                                FLOAT47_tree = (object)adaptor.Create(FLOAT47);
                                adaptor.AddChild(root_0, FLOAT47_tree);

                            }
                            break;
                        case 8:
                            DebugEnterAlt(8);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:123:26: INT
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(123, 26);
                                INT48 = (IToken)Match(input, INT, Follow._INT_in_exp_term924);
                                INT48_tree = (object)adaptor.Create(INT48);
                                adaptor.AddChild(root_0, INT48_tree);

                            }
                            break;
                        case 9:
                            DebugEnterAlt(9);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:123:32: bracket_exp
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(123, 32);
                                PushFollow(Follow._bracket_exp_in_exp_term928);
                                bracket_exp49 = bracket_exp();
                                PopFollow();

                                adaptor.AddChild(root_0, bracket_exp49.Tree);

                            }
                            break;

                    }
                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("exp_term", 12);
                    LeaveRule("exp_term", 12);
                    LeaveRule_exp_term();
                }
                DebugLocation(124, 1);
            }
            finally { DebugExitRule(GrammarFileName, "exp_term"); }
            return retval;

        }
        // $ANTLR end "exp_term"

        partial void EnterRule_exp();
        partial void LeaveRule_exp();
        // $ANTLR start "exp"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:126:1: exp : (| property_exp | logical_exp );
        [GrammarRule("exp")]
        private AstParserRuleReturnScope<object, IToken> exp()
        {
            EnterRule_exp();
            EnterRule("exp", 13);
            TraceIn("exp", 13);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            AstParserRuleReturnScope<object, IToken> property_exp50 = default(AstParserRuleReturnScope<object, IToken>);
            AstParserRuleReturnScope<object, IToken> logical_exp51 = default(AstParserRuleReturnScope<object, IToken>);

            try
            {
                DebugEnterRule(GrammarFileName, "exp");
                DebugLocation(126, 1);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:127:2: (| property_exp | logical_exp )
                    int alt5 = 3;
                    try
                    {
                        DebugEnterDecision(5, false);
                        int LA5_1 = input.LA(1);

                        if ((LA5_1 == EOF))
                        {
                            alt5 = 1;
                        }
                        else if ((LA5_1 == OPEN_PAR))
                        {
                            int LA5_2 = input.LA(2);

                            if ((LA5_2 == ID || LA5_2 == STRING))
                            {
                                alt5 = 2;
                            }
                            else if ((LA5_2 == 20 || (LA5_2 >= 29 && LA5_2 <= 30) || LA5_2 == 32))
                            {
                                alt5 = 3;
                            }
                            else
                            {
                                NoViableAltException nvae = new NoViableAltException("", 5, 2, input, 2);
                                DebugRecognitionException(nvae);
                                throw nvae;
                            }
                        }
                        else
                        {
                            NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
                            DebugRecognitionException(nvae);
                            throw nvae;
                        }
                    }
                    finally { DebugExitDecision(5); }
                    switch (alt5)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:128:2: 
                            {
                                root_0 = (object)adaptor.Nil();

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:128:4: property_exp
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(128, 4);
                                PushFollow(Follow._property_exp_in_exp943);
                                property_exp50 = property_exp();
                                PopFollow();

                                adaptor.AddChild(root_0, property_exp50.Tree);

                            }
                            break;
                        case 3:
                            DebugEnterAlt(3);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:129:4: logical_exp
                            {
                                root_0 = (object)adaptor.Nil();

                                DebugLocation(129, 4);
                                PushFollow(Follow._logical_exp_in_exp948);
                                logical_exp51 = logical_exp();
                                PopFollow();

                                adaptor.AddChild(root_0, logical_exp51.Tree);

                            }
                            break;

                    }
                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("exp", 13);
                    LeaveRule("exp", 13);
                    LeaveRule_exp();
                }
                DebugLocation(130, 1);
            }
            finally { DebugExitRule(GrammarFileName, "exp"); }
            return retval;

        }
        // $ANTLR end "exp"

        partial void EnterRule_start_rule();
        partial void LeaveRule_start_rule();
        // $ANTLR start "start_rule"
        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:132:1: start_rule : exp ;
        [GrammarRule("start_rule")]
        public AstParserRuleReturnScope<object, IToken> start_rule()
        {
            EnterRule_start_rule();
            EnterRule("start_rule", 14);
            TraceIn("start_rule", 14);
            AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
            retval.Start = (IToken)input.LT(1);

            object root_0 = default(object);

            AstParserRuleReturnScope<object, IToken> exp52 = default(AstParserRuleReturnScope<object, IToken>);

            try
            {
                DebugEnterRule(GrammarFileName, "start_rule");
                DebugLocation(132, 6);
                try
                {
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:133:2: ( exp )
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:133:4: exp
                    {
                        root_0 = (object)adaptor.Nil();

                        DebugLocation(133, 4);
                        PushFollow(Follow._exp_in_start_rule959);
                        exp52 = exp();
                        PopFollow();

                        adaptor.AddChild(root_0, exp52.Tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (object)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("start_rule", 14);
                    LeaveRule("start_rule", 14);
                    LeaveRule_start_rule();
                }
                DebugLocation(133, 6);
            }
            finally { DebugExitRule(GrammarFileName, "start_rule"); }
            return retval;

        }
        // $ANTLR end "start_rule"
        #endregion Rules


        #region Follow sets
        private static class Follow
        {
            public static readonly BitSet _STRING_in_constant_values620 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INT_in_constant_values624 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _FLOAT_in_constant_values628 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _39_in_constant_values632 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _38_in_constant_values636 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _40_in_constant_values640 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _ID_in_constant_values644 = new BitSet(new ulong[] { 0x400000000UL });
            public static readonly BitSet _34_in_constant_values647 = new BitSet(new ulong[] { 0x1C000023400UL });
            public static readonly BitSet _constant_values_in_constant_values650 = new BitSet(new ulong[] { 0x800000000UL });
            public static readonly BitSet _35_in_constant_values652 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _31_in_aux_operator703 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _33_in_evaluation_operator739 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _OPEN_PAR_in_comparison_exp750 = new BitSet(new ulong[] { 0x1FE00000UL });
            public static readonly BitSet _comparison_operator_in_comparison_exp753 = new BitSet(new ulong[] { 0x2000000000UL });
            public static readonly BitSet _37_in_comparison_exp756 = new BitSet(new ulong[] { 0x1C00002B400UL });
            public static readonly BitSet _constant_values_in_comparison_exp760 = new BitSet(new ulong[] { 0x40UL });
            public static readonly BitSet _bracket_exp_in_comparison_exp764 = new BitSet(new ulong[] { 0x40UL });
            public static readonly BitSet _CLOSED_PAR_in_comparison_exp767 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _OPEN_PAR_in_logical_exp780 = new BitSet(new ulong[] { 0x160100000UL });
            public static readonly BitSet _logical_operator_in_logical_exp783 = new BitSet(new ulong[] { 0x2000000000UL });
            public static readonly BitSet _37_in_logical_exp786 = new BitSet(new ulong[] { 0x8000UL });
            public static readonly BitSet _bracket_exp_in_logical_exp789 = new BitSet(new ulong[] { 0x40UL });
            public static readonly BitSet _CLOSED_PAR_in_logical_exp791 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _OPEN_PAR_in_evaluation_exp803 = new BitSet(new ulong[] { 0x200000000UL });
            public static readonly BitSet _evaluation_operator_in_evaluation_exp806 = new BitSet(new ulong[] { 0x2000000000UL });
            public static readonly BitSet _37_in_evaluation_exp809 = new BitSet(new ulong[] { 0x20000UL });
            public static readonly BitSet _STRING_in_evaluation_exp812 = new BitSet(new ulong[] { 0x40UL });
            public static readonly BitSet _CLOSED_PAR_in_evaluation_exp814 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _OPEN_PAR_in_property_exp826 = new BitSet(new ulong[] { 0x21000UL });
            public static readonly BitSet _set_in_property_exp829 = new BitSet(new ulong[] { 0x2000000000UL });
            public static readonly BitSet _37_in_property_exp838 = new BitSet(new ulong[] { 0x3B400UL });
            public static readonly BitSet _exp_term_in_property_exp842 = new BitSet(new ulong[] { 0x40UL });
            public static readonly BitSet _CLOSED_PAR_in_property_exp844 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _OPEN_BRACKET_in_bracket_exp856 = new BitSet(new ulong[] { 0x3B400UL });
            public static readonly BitSet _exp_term_in_bracket_exp859 = new BitSet(new ulong[] { 0x1000000020UL });
            public static readonly BitSet _36_in_bracket_exp862 = new BitSet(new ulong[] { 0x3B400UL });
            public static readonly BitSet _exp_term_in_bracket_exp865 = new BitSet(new ulong[] { 0x1000000020UL });
            public static readonly BitSet _CLOSED_BRACKET_in_bracket_exp869 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _property_exp_in_exp_term892 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _comparison_exp_in_exp_term897 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _logical_exp_in_exp_term902 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _evaluation_exp_in_exp_term907 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _STRING_in_exp_term912 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _ID_in_exp_term916 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _FLOAT_in_exp_term920 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INT_in_exp_term924 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _bracket_exp_in_exp_term928 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _property_exp_in_exp943 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _logical_exp_in_exp948 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _exp_in_start_rule959 = new BitSet(new ulong[] { 0x2UL });
        }
        #endregion Follow sets
    }
}