//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: null
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR null C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g 2019-12-05 11:00:56

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using Antlr.Runtime;


namespace ILfQ.Lexer
{

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "null")]
    [System.CLSCompliant(false)]
    public partial class ILfQLexer : Antlr.Runtime.Lexer
    {
        public const int EOF = -1;
        public const int T__20 = 20;
        public const int T__21 = 21;
        public const int T__22 = 22;
        public const int T__23 = 23;
        public const int T__24 = 24;
        public const int T__25 = 25;
        public const int T__26 = 26;
        public const int T__27 = 27;
        public const int T__28 = 28;
        public const int T__29 = 29;
        public const int T__30 = 30;
        public const int T__31 = 31;
        public const int T__32 = 32;
        public const int T__33 = 33;
        public const int T__34 = 34;
        public const int T__35 = 35;
        public const int T__36 = 36;
        public const int T__37 = 37;
        public const int T__38 = 38;
        public const int T__39 = 39;
        public const int T__40 = 40;
        public const int CHAR = 4;
        public const int CLOSED_BRACKET = 5;
        public const int CLOSED_PAR = 6;
        public const int COMMENT = 7;
        public const int ESC_SEQ = 8;
        public const int EXPONENT = 9;
        public const int FLOAT = 10;
        public const int HEX_DIGIT = 11;
        public const int ID = 12;
        public const int INT = 13;
        public const int OCTAL_ESC = 14;
        public const int OPEN_BRACKET = 15;
        public const int OPEN_PAR = 16;
        public const int STRING = 17;
        public const int UNICODE_ESC = 18;
        public const int WS = 19;

        // delegates
        // delegators

        public ILfQLexer()
        {
            OnCreated();
        }

        public ILfQLexer(ICharStream input)
            : this(input, new RecognizerSharedState())
        {
        }

        public ILfQLexer(ICharStream input, RecognizerSharedState state)
            : base(input, state)
        {

            OnCreated();
        }
        public override string GrammarFileName { get { return "C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g"; } }


        partial void OnCreated();
        partial void EnterRule(string ruleName, int ruleIndex);
        partial void LeaveRule(string ruleName, int ruleIndex);

        partial void EnterRule_T__20();
        partial void LeaveRule_T__20();

        // $ANTLR start "T__20"
        [GrammarRule("T__20")]
        private void mT__20()
        {
            EnterRule_T__20();
            EnterRule("T__20", 1);
            TraceIn("T__20", 1);
            try
            {
                int _type = T__20;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:7:7: ( '$and' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:7:9: '$and'
                {
                    DebugLocation(7, 9);
                    Match("$and");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__20", 1);
                LeaveRule("T__20", 1);
                LeaveRule_T__20();
            }
        }
        // $ANTLR end "T__20"

        partial void EnterRule_T__21();
        partial void LeaveRule_T__21();

        // $ANTLR start "T__21"
        [GrammarRule("T__21")]
        private void mT__21()
        {
            EnterRule_T__21();
            EnterRule("T__21", 2);
            TraceIn("T__21", 2);
            try
            {
                int _type = T__21;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:8:7: ( '$eq' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:8:9: '$eq'
                {
                    DebugLocation(8, 9);
                    Match("$eq");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__21", 2);
                LeaveRule("T__21", 2);
                LeaveRule_T__21();
            }
        }
        // $ANTLR end "T__21"

        partial void EnterRule_T__22();
        partial void LeaveRule_T__22();

        // $ANTLR start "T__22"
        [GrammarRule("T__22")]
        private void mT__22()
        {
            EnterRule_T__22();
            EnterRule("T__22", 3);
            TraceIn("T__22", 3);
            try
            {
                int _type = T__22;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:9:7: ( '$gt' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:9:9: '$gt'
                {
                    DebugLocation(9, 9);
                    Match("$gt");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__22", 3);
                LeaveRule("T__22", 3);
                LeaveRule_T__22();
            }
        }
        // $ANTLR end "T__22"

        partial void EnterRule_T__23();
        partial void LeaveRule_T__23();

        // $ANTLR start "T__23"
        [GrammarRule("T__23")]
        private void mT__23()
        {
            EnterRule_T__23();
            EnterRule("T__23", 4);
            TraceIn("T__23", 4);
            try
            {
                int _type = T__23;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:10:7: ( '$gte' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:10:9: '$gte'
                {
                    DebugLocation(10, 9);
                    Match("$gte");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__23", 4);
                LeaveRule("T__23", 4);
                LeaveRule_T__23();
            }
        }
        // $ANTLR end "T__23"

        partial void EnterRule_T__24();
        partial void LeaveRule_T__24();

        // $ANTLR start "T__24"
        [GrammarRule("T__24")]
        private void mT__24()
        {
            EnterRule_T__24();
            EnterRule("T__24", 5);
            TraceIn("T__24", 5);
            try
            {
                int _type = T__24;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:11:7: ( '$in' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:11:9: '$in'
                {
                    DebugLocation(11, 9);
                    Match("$in");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__24", 5);
                LeaveRule("T__24", 5);
                LeaveRule_T__24();
            }
        }
        // $ANTLR end "T__24"

        partial void EnterRule_T__25();
        partial void LeaveRule_T__25();

        // $ANTLR start "T__25"
        [GrammarRule("T__25")]
        private void mT__25()
        {
            EnterRule_T__25();
            EnterRule("T__25", 6);
            TraceIn("T__25", 6);
            try
            {
                int _type = T__25;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:12:7: ( '$lt' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:12:9: '$lt'
                {
                    DebugLocation(12, 9);
                    Match("$lt");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__25", 6);
                LeaveRule("T__25", 6);
                LeaveRule_T__25();
            }
        }
        // $ANTLR end "T__25"

        partial void EnterRule_T__26();
        partial void LeaveRule_T__26();

        // $ANTLR start "T__26"
        [GrammarRule("T__26")]
        private void mT__26()
        {
            EnterRule_T__26();
            EnterRule("T__26", 7);
            TraceIn("T__26", 7);
            try
            {
                int _type = T__26;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:13:7: ( '$lte' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:13:9: '$lte'
                {
                    DebugLocation(13, 9);
                    Match("$lte");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__26", 7);
                LeaveRule("T__26", 7);
                LeaveRule_T__26();
            }
        }
        // $ANTLR end "T__26"

        partial void EnterRule_T__27();
        partial void LeaveRule_T__27();

        // $ANTLR start "T__27"
        [GrammarRule("T__27")]
        private void mT__27()
        {
            EnterRule_T__27();
            EnterRule("T__27", 8);
            TraceIn("T__27", 8);
            try
            {
                int _type = T__27;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:14:7: ( '$ne' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:14:9: '$ne'
                {
                    DebugLocation(14, 9);
                    Match("$ne");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__27", 8);
                LeaveRule("T__27", 8);
                LeaveRule_T__27();
            }
        }
        // $ANTLR end "T__27"

        partial void EnterRule_T__28();
        partial void LeaveRule_T__28();

        // $ANTLR start "T__28"
        [GrammarRule("T__28")]
        private void mT__28()
        {
            EnterRule_T__28();
            EnterRule("T__28", 9);
            TraceIn("T__28", 9);
            try
            {
                int _type = T__28;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:15:7: ( '$nin' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:15:9: '$nin'
                {
                    DebugLocation(15, 9);
                    Match("$nin");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__28", 9);
                LeaveRule("T__28", 9);
                LeaveRule_T__28();
            }
        }
        // $ANTLR end "T__28"

        partial void EnterRule_T__29();
        partial void LeaveRule_T__29();

        // $ANTLR start "T__29"
        [GrammarRule("T__29")]
        private void mT__29()
        {
            EnterRule_T__29();
            EnterRule("T__29", 10);
            TraceIn("T__29", 10);
            try
            {
                int _type = T__29;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:16:7: ( '$nor' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:16:9: '$nor'
                {
                    DebugLocation(16, 9);
                    Match("$nor");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__29", 10);
                LeaveRule("T__29", 10);
                LeaveRule_T__29();
            }
        }
        // $ANTLR end "T__29"

        partial void EnterRule_T__30();
        partial void LeaveRule_T__30();

        // $ANTLR start "T__30"
        [GrammarRule("T__30")]
        private void mT__30()
        {
            EnterRule_T__30();
            EnterRule("T__30", 11);
            TraceIn("T__30", 11);
            try
            {
                int _type = T__30;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:17:7: ( '$not' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:17:9: '$not'
                {
                    DebugLocation(17, 9);
                    Match("$not");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__30", 11);
                LeaveRule("T__30", 11);
                LeaveRule_T__30();
            }
        }
        // $ANTLR end "T__30"

        partial void EnterRule_T__31();
        partial void LeaveRule_T__31();

        // $ANTLR start "T__31"
        [GrammarRule("T__31")]
        private void mT__31()
        {
            EnterRule_T__31();
            EnterRule("T__31", 12);
            TraceIn("T__31", 12);
            try
            {
                int _type = T__31;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:18:7: ( '$options' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:18:9: '$options'
                {
                    DebugLocation(18, 9);
                    Match("$options");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__31", 12);
                LeaveRule("T__31", 12);
                LeaveRule_T__31();
            }
        }
        // $ANTLR end "T__31"

        partial void EnterRule_T__32();
        partial void LeaveRule_T__32();

        // $ANTLR start "T__32"
        [GrammarRule("T__32")]
        private void mT__32()
        {
            EnterRule_T__32();
            EnterRule("T__32", 13);
            TraceIn("T__32", 13);
            try
            {
                int _type = T__32;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:19:7: ( '$or' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:19:9: '$or'
                {
                    DebugLocation(19, 9);
                    Match("$or");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__32", 13);
                LeaveRule("T__32", 13);
                LeaveRule_T__32();
            }
        }
        // $ANTLR end "T__32"

        partial void EnterRule_T__33();
        partial void LeaveRule_T__33();

        // $ANTLR start "T__33"
        [GrammarRule("T__33")]
        private void mT__33()
        {
            EnterRule_T__33();
            EnterRule("T__33", 14);
            TraceIn("T__33", 14);
            try
            {
                int _type = T__33;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:20:7: ( '$regex' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:20:9: '$regex'
                {
                    DebugLocation(20, 9);
                    Match("$regex");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__33", 14);
                LeaveRule("T__33", 14);
                LeaveRule_T__33();
            }
        }
        // $ANTLR end "T__33"

        partial void EnterRule_T__34();
        partial void LeaveRule_T__34();

        // $ANTLR start "T__34"
        [GrammarRule("T__34")]
        private void mT__34()
        {
            EnterRule_T__34();
            EnterRule("T__34", 15);
            TraceIn("T__34", 15);
            try
            {
                int _type = T__34;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:21:7: ( '(' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:21:9: '('
                {
                    DebugLocation(21, 9);
                    Match('(');

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__34", 15);
                LeaveRule("T__34", 15);
                LeaveRule_T__34();
            }
        }
        // $ANTLR end "T__34"

        partial void EnterRule_T__35();
        partial void LeaveRule_T__35();

        // $ANTLR start "T__35"
        [GrammarRule("T__35")]
        private void mT__35()
        {
            EnterRule_T__35();
            EnterRule("T__35", 16);
            TraceIn("T__35", 16);
            try
            {
                int _type = T__35;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:22:7: ( ')' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:22:9: ')'
                {
                    DebugLocation(22, 9);
                    Match(')');

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__35", 16);
                LeaveRule("T__35", 16);
                LeaveRule_T__35();
            }
        }
        // $ANTLR end "T__35"

        partial void EnterRule_T__36();
        partial void LeaveRule_T__36();

        // $ANTLR start "T__36"
        [GrammarRule("T__36")]
        private void mT__36()
        {
            EnterRule_T__36();
            EnterRule("T__36", 17);
            TraceIn("T__36", 17);
            try
            {
                int _type = T__36;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:23:7: ( ',' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:23:9: ','
                {
                    DebugLocation(23, 9);
                    Match(',');

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__36", 17);
                LeaveRule("T__36", 17);
                LeaveRule_T__36();
            }
        }
        // $ANTLR end "T__36"

        partial void EnterRule_T__37();
        partial void LeaveRule_T__37();

        // $ANTLR start "T__37"
        [GrammarRule("T__37")]
        private void mT__37()
        {
            EnterRule_T__37();
            EnterRule("T__37", 18);
            TraceIn("T__37", 18);
            try
            {
                int _type = T__37;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:24:7: ( ':' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:24:9: ':'
                {
                    DebugLocation(24, 9);
                    Match(':');

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__37", 18);
                LeaveRule("T__37", 18);
                LeaveRule_T__37();
            }
        }
        // $ANTLR end "T__37"

        partial void EnterRule_T__38();
        partial void LeaveRule_T__38();

        // $ANTLR start "T__38"
        [GrammarRule("T__38")]
        private void mT__38()
        {
            EnterRule_T__38();
            EnterRule("T__38", 19);
            TraceIn("T__38", 19);
            try
            {
                int _type = T__38;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:25:7: ( 'false' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:25:9: 'false'
                {
                    DebugLocation(25, 9);
                    Match("false");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__38", 19);
                LeaveRule("T__38", 19);
                LeaveRule_T__38();
            }
        }
        // $ANTLR end "T__38"

        partial void EnterRule_T__39();
        partial void LeaveRule_T__39();

        // $ANTLR start "T__39"
        [GrammarRule("T__39")]
        private void mT__39()
        {
            EnterRule_T__39();
            EnterRule("T__39", 20);
            TraceIn("T__39", 20);
            try
            {
                int _type = T__39;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:26:7: ( 'null' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:26:9: 'null'
                {
                    DebugLocation(26, 9);
                    Match("null");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__39", 20);
                LeaveRule("T__39", 20);
                LeaveRule_T__39();
            }
        }
        // $ANTLR end "T__39"

        partial void EnterRule_T__40();
        partial void LeaveRule_T__40();

        // $ANTLR start "T__40"
        [GrammarRule("T__40")]
        private void mT__40()
        {
            EnterRule_T__40();
            EnterRule("T__40", 21);
            TraceIn("T__40", 21);
            try
            {
                int _type = T__40;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:27:7: ( 'true' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:27:9: 'true'
                {
                    DebugLocation(27, 9);
                    Match("true");


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("T__40", 21);
                LeaveRule("T__40", 21);
                LeaveRule_T__40();
            }
        }
        // $ANTLR end "T__40"

        partial void EnterRule_ID();
        partial void LeaveRule_ID();

        // $ANTLR start "ID"
        [GrammarRule("ID")]
        private void mID()
        {
            EnterRule_ID();
            EnterRule("ID", 22);
            TraceIn("ID", 22);
            try
            {
                int _type = ID;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:9:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:9:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
                {
                    DebugLocation(9, 7);
                    if ((input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z'))
                    {
                        input.Consume();
                    }
                    else
                    {
                        MismatchedSetException mse = new MismatchedSetException(null, input);
                        DebugRecognitionException(mse);
                        Recover(mse);
                        throw mse;
                    }

                    DebugLocation(9, 31);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:9:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
                    try
                    {
                        DebugEnterSubRule(1);
                        while (true)
                        {
                            int alt1 = 2;
                            try
                            {
                                DebugEnterDecision(1, false);
                                int LA1_1 = input.LA(1);

                                if (((LA1_1 >= '0' && LA1_1 <= '9') || (LA1_1 >= 'A' && LA1_1 <= 'Z') || LA1_1 == '_' || (LA1_1 >= 'a' && LA1_1 <= 'z')))
                                {
                                    alt1 = 1;
                                }


                            }
                            finally { DebugExitDecision(1); }
                            switch (alt1)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                                    {
                                        DebugLocation(9, 31);
                                        input.Consume();


                                    }
                                    break;

                                default:
                                    goto loop1;
                            }
                        }

                    loop1:
                        ;

                    }
                    finally { DebugExitSubRule(1); }


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("ID", 22);
                LeaveRule("ID", 22);
                LeaveRule_ID();
            }
        }
        // $ANTLR end "ID"

        partial void EnterRule_INT();
        partial void LeaveRule_INT();

        // $ANTLR start "INT"
        [GrammarRule("INT")]
        private void mINT()
        {
            EnterRule_INT();
            EnterRule("INT", 23);
            TraceIn("INT", 23);
            try
            {
                int _type = INT;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:12:5: ( ( '0' .. '9' )+ )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:12:7: ( '0' .. '9' )+
                {
                    DebugLocation(12, 7);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:12:7: ( '0' .. '9' )+
                    int cnt2 = 0;
                    try
                    {
                        DebugEnterSubRule(2);
                        while (true)
                        {
                            int alt2 = 2;
                            try
                            {
                                DebugEnterDecision(2, false);
                                int LA2_1 = input.LA(1);

                                if (((LA2_1 >= '0' && LA2_1 <= '9')))
                                {
                                    alt2 = 1;
                                }


                            }
                            finally { DebugExitDecision(2); }
                            switch (alt2)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                                    {
                                        DebugLocation(12, 7);
                                        input.Consume();


                                    }
                                    break;

                                default:
                                    if (cnt2 >= 1)
                                        goto loop2;

                                    EarlyExitException eee2 = new EarlyExitException(2, input);
                                    DebugRecognitionException(eee2);
                                    throw eee2;
                            }
                            cnt2++;
                        }
                    loop2:
                        ;

                    }
                    finally { DebugExitSubRule(2); }


                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("INT", 23);
                LeaveRule("INT", 23);
                LeaveRule_INT();
            }
        }
        // $ANTLR end "INT"

        partial void EnterRule_FLOAT();
        partial void LeaveRule_FLOAT();

        // $ANTLR start "FLOAT"
        [GrammarRule("FLOAT")]
        private void mFLOAT()
        {
            EnterRule_FLOAT();
            EnterRule("FLOAT", 24);
            TraceIn("FLOAT", 24);
            try
            {
                int _type = FLOAT;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:16:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
                int alt9 = 3;
                try
                {
                    DebugEnterDecision(9, false);
                    try
                    {
                        alt9 = dfa9.Predict(input);
                    }
                    catch (NoViableAltException nvae)
                    {
                        DebugRecognitionException(nvae);
                        throw;
                    }
                }
                finally { DebugExitDecision(9); }
                switch (alt9)
                {
                    case 1:
                        DebugEnterAlt(1);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:16:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
                        {
                            DebugLocation(16, 9);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:16:9: ( '0' .. '9' )+
                            int cnt3 = 0;
                            try
                            {
                                DebugEnterSubRule(3);
                                while (true)
                                {
                                    int alt3 = 2;
                                    try
                                    {
                                        DebugEnterDecision(3, false);
                                        int LA3_1 = input.LA(1);

                                        if (((LA3_1 >= '0' && LA3_1 <= '9')))
                                        {
                                            alt3 = 1;
                                        }


                                    }
                                    finally { DebugExitDecision(3); }
                                    switch (alt3)
                                    {
                                        case 1:
                                            DebugEnterAlt(1);
                                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                                            {
                                                DebugLocation(16, 9);
                                                input.Consume();


                                            }
                                            break;

                                        default:
                                            if (cnt3 >= 1)
                                                goto loop3;

                                            EarlyExitException eee3 = new EarlyExitException(3, input);
                                            DebugRecognitionException(eee3);
                                            throw eee3;
                                    }
                                    cnt3++;
                                }
                            loop3:
                                ;

                            }
                            finally { DebugExitSubRule(3); }

                            DebugLocation(16, 21);
                            Match('.');
                            DebugLocation(16, 25);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:16:25: ( '0' .. '9' )*
                            try
                            {
                                DebugEnterSubRule(4);
                                while (true)
                                {
                                    int alt4 = 2;
                                    try
                                    {
                                        DebugEnterDecision(4, false);
                                        int LA4_1 = input.LA(1);

                                        if (((LA4_1 >= '0' && LA4_1 <= '9')))
                                        {
                                            alt4 = 1;
                                        }


                                    }
                                    finally { DebugExitDecision(4); }
                                    switch (alt4)
                                    {
                                        case 1:
                                            DebugEnterAlt(1);
                                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                                            {
                                                DebugLocation(16, 25);
                                                input.Consume();


                                            }
                                            break;

                                        default:
                                            goto loop4;
                                    }
                                }

                            loop4:
                                ;

                            }
                            finally { DebugExitSubRule(4); }

                            DebugLocation(16, 37);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:16:37: ( EXPONENT )?
                            int alt5 = 2;
                            try
                            {
                                DebugEnterSubRule(5);
                                try
                                {
                                    DebugEnterDecision(5, false);
                                    int LA5_1 = input.LA(1);

                                    if ((LA5_1 == 'E' || LA5_1 == 'e'))
                                    {
                                        alt5 = 1;
                                    }
                                }
                                finally { DebugExitDecision(5); }
                                switch (alt5)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:16:37: EXPONENT
                                        {
                                            DebugLocation(16, 37);
                                            mEXPONENT();

                                        }
                                        break;

                                }
                            }
                            finally { DebugExitSubRule(5); }


                        }
                        break;
                    case 2:
                        DebugEnterAlt(2);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:17:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
                        {
                            DebugLocation(17, 9);
                            Match('.');
                            DebugLocation(17, 13);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:17:13: ( '0' .. '9' )+
                            int cnt6 = 0;
                            try
                            {
                                DebugEnterSubRule(6);
                                while (true)
                                {
                                    int alt6 = 2;
                                    try
                                    {
                                        DebugEnterDecision(6, false);
                                        int LA6_1 = input.LA(1);

                                        if (((LA6_1 >= '0' && LA6_1 <= '9')))
                                        {
                                            alt6 = 1;
                                        }


                                    }
                                    finally { DebugExitDecision(6); }
                                    switch (alt6)
                                    {
                                        case 1:
                                            DebugEnterAlt(1);
                                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                                            {
                                                DebugLocation(17, 13);
                                                input.Consume();


                                            }
                                            break;

                                        default:
                                            if (cnt6 >= 1)
                                                goto loop6;

                                            EarlyExitException eee6 = new EarlyExitException(6, input);
                                            DebugRecognitionException(eee6);
                                            throw eee6;
                                    }
                                    cnt6++;
                                }
                            loop6:
                                ;

                            }
                            finally { DebugExitSubRule(6); }

                            DebugLocation(17, 25);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:17:25: ( EXPONENT )?
                            int alt7 = 2;
                            try
                            {
                                DebugEnterSubRule(7);
                                try
                                {
                                    DebugEnterDecision(7, false);
                                    int LA7_1 = input.LA(1);

                                    if ((LA7_1 == 'E' || LA7_1 == 'e'))
                                    {
                                        alt7 = 1;
                                    }
                                }
                                finally { DebugExitDecision(7); }
                                switch (alt7)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:17:25: EXPONENT
                                        {
                                            DebugLocation(17, 25);
                                            mEXPONENT();

                                        }
                                        break;

                                }
                            }
                            finally { DebugExitSubRule(7); }


                        }
                        break;
                    case 3:
                        DebugEnterAlt(3);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:18:9: ( '0' .. '9' )+ EXPONENT
                        {
                            DebugLocation(18, 9);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:18:9: ( '0' .. '9' )+
                            int cnt8 = 0;
                            try
                            {
                                DebugEnterSubRule(8);
                                while (true)
                                {
                                    int alt8 = 2;
                                    try
                                    {
                                        DebugEnterDecision(8, false);
                                        int LA8_1 = input.LA(1);

                                        if (((LA8_1 >= '0' && LA8_1 <= '9')))
                                        {
                                            alt8 = 1;
                                        }


                                    }
                                    finally { DebugExitDecision(8); }
                                    switch (alt8)
                                    {
                                        case 1:
                                            DebugEnterAlt(1);
                                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                                            {
                                                DebugLocation(18, 9);
                                                input.Consume();


                                            }
                                            break;

                                        default:
                                            if (cnt8 >= 1)
                                                goto loop8;

                                            EarlyExitException eee8 = new EarlyExitException(8, input);
                                            DebugRecognitionException(eee8);
                                            throw eee8;
                                    }
                                    cnt8++;
                                }
                            loop8:
                                ;

                            }
                            finally { DebugExitSubRule(8); }

                            DebugLocation(18, 21);
                            mEXPONENT();

                        }
                        break;

                }
                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("FLOAT", 24);
                LeaveRule("FLOAT", 24);
                LeaveRule_FLOAT();
            }
        }
        // $ANTLR end "FLOAT"

        partial void EnterRule_COMMENT();
        partial void LeaveRule_COMMENT();

        // $ANTLR start "COMMENT"
        [GrammarRule("COMMENT")]
        private void mCOMMENT()
        {
            EnterRule_COMMENT();
            EnterRule("COMMENT", 25);
            TraceIn("COMMENT", 25);
            try
            {
                int _type = COMMENT;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:22:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
                int alt13 = 2;
                try
                {
                    DebugEnterDecision(13, false);
                    int LA13_1 = input.LA(1);

                    if ((LA13_1 == '/'))
                    {
                        int LA13_2 = input.LA(2);

                        if ((LA13_2 == '/'))
                        {
                            alt13 = 1;
                        }
                        else if ((LA13_2 == '*'))
                        {
                            alt13 = 2;
                        }
                        else
                        {
                            NoViableAltException nvae = new NoViableAltException("", 13, 1, input, 2);
                            DebugRecognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else
                    {
                        NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
                        DebugRecognitionException(nvae);
                        throw nvae;
                    }
                }
                finally { DebugExitDecision(13); }
                switch (alt13)
                {
                    case 1:
                        DebugEnterAlt(1);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:22:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
                        {
                            DebugLocation(22, 9);
                            Match("//");

                            DebugLocation(22, 14);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:22:14: (~ ( '\\n' | '\\r' ) )*
                            try
                            {
                                DebugEnterSubRule(10);
                                while (true)
                                {
                                    int alt10 = 2;
                                    try
                                    {
                                        DebugEnterDecision(10, false);
                                        int LA10_1 = input.LA(1);

                                        if (((LA10_1 >= '\u0000' && LA10_1 <= '\t') || (LA10_1 >= '\u000B' && LA10_1 <= '\f') || (LA10_1 >= '\u000E' && LA10_1 <= '\uFFFF')))
                                        {
                                            alt10 = 1;
                                        }


                                    }
                                    finally { DebugExitDecision(10); }
                                    switch (alt10)
                                    {
                                        case 1:
                                            DebugEnterAlt(1);
                                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                                            {
                                                DebugLocation(22, 14);
                                                input.Consume();


                                            }
                                            break;

                                        default:
                                            goto loop10;
                                    }
                                }

                            loop10:
                                ;

                            }
                            finally { DebugExitSubRule(10); }

                            DebugLocation(22, 28);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:22:28: ( '\\r' )?
                            int alt11 = 2;
                            try
                            {
                                DebugEnterSubRule(11);
                                try
                                {
                                    DebugEnterDecision(11, false);
                                    int LA11_1 = input.LA(1);

                                    if ((LA11_1 == '\r'))
                                    {
                                        alt11 = 1;
                                    }
                                }
                                finally { DebugExitDecision(11); }
                                switch (alt11)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:22:28: '\\r'
                                        {
                                            DebugLocation(22, 28);
                                            Match('\r');

                                        }
                                        break;

                                }
                            }
                            finally { DebugExitSubRule(11); }

                            DebugLocation(22, 34);
                            Match('\n');
                            DebugLocation(22, 39);
                            _channel = Hidden;

                        }
                        break;
                    case 2:
                        DebugEnterAlt(2);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:23:9: '/*' ( options {greedy=false; } : . )* '*/'
                        {
                            DebugLocation(23, 9);
                            Match("/*");

                            DebugLocation(23, 14);
                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:23:14: ( options {greedy=false; } : . )*
                            try
                            {
                                DebugEnterSubRule(12);
                                while (true)
                                {
                                    int alt12 = 2;
                                    try
                                    {
                                        DebugEnterDecision(12, false);
                                        int LA12_1 = input.LA(1);

                                        if ((LA12_1 == '*'))
                                        {
                                            int LA12_2 = input.LA(2);

                                            if ((LA12_2 == '/'))
                                            {
                                                alt12 = 2;
                                            }
                                            else if (((LA12_2 >= '\u0000' && LA12_2 <= '.') || (LA12_2 >= '0' && LA12_2 <= '\uFFFF')))
                                            {
                                                alt12 = 1;
                                            }


                                        }
                                        else if (((LA12_1 >= '\u0000' && LA12_1 <= ')') || (LA12_1 >= '+' && LA12_1 <= '\uFFFF')))
                                        {
                                            alt12 = 1;
                                        }


                                    }
                                    finally { DebugExitDecision(12); }
                                    switch (alt12)
                                    {
                                        case 1:
                                            DebugEnterAlt(1);
                                            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:23:42: .
                                            {
                                                DebugLocation(23, 42);
                                                MatchAny();

                                            }
                                            break;

                                        default:
                                            goto loop12;
                                    }
                                }

                            loop12:
                                ;

                            }
                            finally { DebugExitSubRule(12); }

                            DebugLocation(23, 47);
                            Match("*/");

                            DebugLocation(23, 52);
                            _channel = Hidden;

                        }
                        break;

                }
                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("COMMENT", 25);
                LeaveRule("COMMENT", 25);
                LeaveRule_COMMENT();
            }
        }
        // $ANTLR end "COMMENT"

        partial void EnterRule_WS();
        partial void LeaveRule_WS();

        // $ANTLR start "WS"
        [GrammarRule("WS")]
        private void mWS()
        {
            EnterRule_WS();
            EnterRule("WS", 26);
            TraceIn("WS", 26);
            try
            {
                int _type = WS;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:26:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:26:9: ( ' ' | '\\t' | '\\r' | '\\n' )
                {
                    DebugLocation(26, 9);
                    if ((input.LA(1) >= '\t' && input.LA(1) <= '\n') || input.LA(1) == '\r' || input.LA(1) == ' ')
                    {
                        input.Consume();
                    }
                    else
                    {
                        MismatchedSetException mse = new MismatchedSetException(null, input);
                        DebugRecognitionException(mse);
                        Recover(mse);
                        throw mse;
                    }

                    DebugLocation(30, 11);
                    _channel = Hidden;

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("WS", 26);
                LeaveRule("WS", 26);
                LeaveRule_WS();
            }
        }
        // $ANTLR end "WS"

        partial void EnterRule_STRING();
        partial void LeaveRule_STRING();

        // $ANTLR start "STRING"
        [GrammarRule("STRING")]
        private void mSTRING()
        {
            EnterRule_STRING();
            EnterRule("STRING", 27);
            TraceIn("STRING", 27);
            try
            {
                int _type = STRING;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:34:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:34:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
                {
                    DebugLocation(34, 8);
                    Match('\"');
                    DebugLocation(34, 12);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:34:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
                    try
                    {
                        DebugEnterSubRule(14);
                        while (true)
                        {
                            int alt14 = 3;
                            try
                            {
                                DebugEnterDecision(14, false);
                                int LA14_1 = input.LA(1);

                                if ((LA14_1 == '\\'))
                                {
                                    alt14 = 1;
                                }
                                else if (((LA14_1 >= '\u0000' && LA14_1 <= '!') || (LA14_1 >= '#' && LA14_1 <= '[') || (LA14_1 >= ']' && LA14_1 <= '\uFFFF')))
                                {
                                    alt14 = 2;
                                }


                            }
                            finally { DebugExitDecision(14); }
                            switch (alt14)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:34:14: ESC_SEQ
                                    {
                                        DebugLocation(34, 14);
                                        mESC_SEQ();

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:34:24: ~ ( '\\\\' | '\"' )
                                    {
                                        DebugLocation(34, 24);
                                        input.Consume();


                                    }
                                    break;

                                default:
                                    goto loop14;
                            }
                        }

                    loop14:
                        ;

                    }
                    finally { DebugExitSubRule(14); }

                    DebugLocation(34, 39);
                    Match('\"');

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("STRING", 27);
                LeaveRule("STRING", 27);
                LeaveRule_STRING();
            }
        }
        // $ANTLR end "STRING"

        partial void EnterRule_CHAR();
        partial void LeaveRule_CHAR();

        // $ANTLR start "CHAR"
        [GrammarRule("CHAR")]
        private void mCHAR()
        {
            EnterRule_CHAR();
            EnterRule("CHAR", 28);
            TraceIn("CHAR", 28);
            try
            {
                int _type = CHAR;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:37:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:37:8: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
                {
                    DebugLocation(37, 8);
                    Match('\'');
                    DebugLocation(37, 13);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:37:13: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
                    int alt15 = 2;
                    try
                    {
                        DebugEnterSubRule(15);
                        try
                        {
                            DebugEnterDecision(15, false);
                            int LA15_1 = input.LA(1);

                            if ((LA15_1 == '\\'))
                            {
                                alt15 = 1;
                            }
                            else if (((LA15_1 >= '\u0000' && LA15_1 <= '&') || (LA15_1 >= '(' && LA15_1 <= '[') || (LA15_1 >= ']' && LA15_1 <= '\uFFFF')))
                            {
                                alt15 = 2;
                            }
                            else
                            {
                                NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
                                DebugRecognitionException(nvae);
                                throw nvae;
                            }
                        }
                        finally { DebugExitDecision(15); }
                        switch (alt15)
                        {
                            case 1:
                                DebugEnterAlt(1);
                                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:37:15: ESC_SEQ
                                {
                                    DebugLocation(37, 15);
                                    mESC_SEQ();

                                }
                                break;
                            case 2:
                                DebugEnterAlt(2);
                                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:37:25: ~ ( '\\'' | '\\\\' )
                                {
                                    DebugLocation(37, 25);
                                    input.Consume();


                                }
                                break;

                        }
                    }
                    finally { DebugExitSubRule(15); }

                    DebugLocation(37, 40);
                    Match('\'');

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("CHAR", 28);
                LeaveRule("CHAR", 28);
                LeaveRule_CHAR();
            }
        }
        // $ANTLR end "CHAR"

        partial void EnterRule_EXPONENT();
        partial void LeaveRule_EXPONENT();

        // $ANTLR start "EXPONENT"
        [GrammarRule("EXPONENT")]
        private void mEXPONENT()
        {
            EnterRule_EXPONENT();
            EnterRule("EXPONENT", 29);
            TraceIn("EXPONENT", 29);
            try
            {
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:42:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:42:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
                {
                    DebugLocation(42, 12);
                    if (input.LA(1) == 'E' || input.LA(1) == 'e')
                    {
                        input.Consume();
                    }
                    else
                    {
                        MismatchedSetException mse = new MismatchedSetException(null, input);
                        DebugRecognitionException(mse);
                        Recover(mse);
                        throw mse;
                    }

                    DebugLocation(42, 22);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:42:22: ( '+' | '-' )?
                    int alt16 = 2;
                    try
                    {
                        DebugEnterSubRule(16);
                        try
                        {
                            DebugEnterDecision(16, false);
                            int LA16_1 = input.LA(1);

                            if ((LA16_1 == '+' || LA16_1 == '-'))
                            {
                                alt16 = 1;
                            }
                        }
                        finally { DebugExitDecision(16); }
                        switch (alt16)
                        {
                            case 1:
                                DebugEnterAlt(1);
                                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                                {
                                    DebugLocation(42, 22);
                                    input.Consume();


                                }
                                break;

                        }
                    }
                    finally { DebugExitSubRule(16); }

                    DebugLocation(42, 33);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:42:33: ( '0' .. '9' )+
                    int cnt17 = 0;
                    try
                    {
                        DebugEnterSubRule(17);
                        while (true)
                        {
                            int alt17 = 2;
                            try
                            {
                                DebugEnterDecision(17, false);
                                int LA17_1 = input.LA(1);

                                if (((LA17_1 >= '0' && LA17_1 <= '9')))
                                {
                                    alt17 = 1;
                                }


                            }
                            finally { DebugExitDecision(17); }
                            switch (alt17)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                                    {
                                        DebugLocation(42, 33);
                                        input.Consume();


                                    }
                                    break;

                                default:
                                    if (cnt17 >= 1)
                                        goto loop17;

                                    EarlyExitException eee17 = new EarlyExitException(17, input);
                                    DebugRecognitionException(eee17);
                                    throw eee17;
                            }
                            cnt17++;
                        }
                    loop17:
                        ;

                    }
                    finally { DebugExitSubRule(17); }


                }

            }
            finally
            {
                TraceOut("EXPONENT", 29);
                LeaveRule("EXPONENT", 29);
                LeaveRule_EXPONENT();
            }
        }
        // $ANTLR end "EXPONENT"

        partial void EnterRule_HEX_DIGIT();
        partial void LeaveRule_HEX_DIGIT();

        // $ANTLR start "HEX_DIGIT"
        [GrammarRule("HEX_DIGIT")]
        private void mHEX_DIGIT()
        {
            EnterRule_HEX_DIGIT();
            EnterRule("HEX_DIGIT", 30);
            TraceIn("HEX_DIGIT", 30);
            try
            {
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:45:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:
                {
                    DebugLocation(45, 11);
                    if ((input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'F') || (input.LA(1) >= 'a' && input.LA(1) <= 'f'))
                    {
                        input.Consume();
                    }
                    else
                    {
                        MismatchedSetException mse = new MismatchedSetException(null, input);
                        DebugRecognitionException(mse);
                        Recover(mse);
                        throw mse;
                    }


                }

            }
            finally
            {
                TraceOut("HEX_DIGIT", 30);
                LeaveRule("HEX_DIGIT", 30);
                LeaveRule_HEX_DIGIT();
            }
        }
        // $ANTLR end "HEX_DIGIT"

        partial void EnterRule_ESC_SEQ();
        partial void LeaveRule_ESC_SEQ();

        // $ANTLR start "ESC_SEQ"
        [GrammarRule("ESC_SEQ")]
        private void mESC_SEQ()
        {
            EnterRule_ESC_SEQ();
            EnterRule("ESC_SEQ", 31);
            TraceIn("ESC_SEQ", 31);
            try
            {
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:49:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
                int alt18 = 3;
                try
                {
                    DebugEnterDecision(18, false);
                    int LA18_1 = input.LA(1);

                    if ((LA18_1 == '\\'))
                    {
                        switch (input.LA(2))
                        {
                            case '\"':
                            case '\'':
                            case '\\':
                            case 'b':
                            case 'f':
                            case 'n':
                            case 'r':
                            case 't':
                                {
                                    alt18 = 1;
                                }
                                break;
                            case 'u':
                                {
                                    alt18 = 2;
                                }
                                break;
                            case '0':
                            case '1':
                            case '2':
                            case '3':
                            case '4':
                            case '5':
                            case '6':
                            case '7':
                                {
                                    alt18 = 3;
                                }
                                break;
                            default:
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 18, 1, input, 2);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                        }

                    }
                    else
                    {
                        NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
                        DebugRecognitionException(nvae);
                        throw nvae;
                    }
                }
                finally { DebugExitDecision(18); }
                switch (alt18)
                {
                    case 1:
                        DebugEnterAlt(1);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:49:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
                        {
                            DebugLocation(49, 9);
                            Match('\\');
                            DebugLocation(49, 14);
                            input.Consume();


                        }
                        break;
                    case 2:
                        DebugEnterAlt(2);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:50:9: UNICODE_ESC
                        {
                            DebugLocation(50, 9);
                            mUNICODE_ESC();

                        }
                        break;
                    case 3:
                        DebugEnterAlt(3);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:51:9: OCTAL_ESC
                        {
                            DebugLocation(51, 9);
                            mOCTAL_ESC();

                        }
                        break;

                }
            }
            finally
            {
                TraceOut("ESC_SEQ", 31);
                LeaveRule("ESC_SEQ", 31);
                LeaveRule_ESC_SEQ();
            }
        }
        // $ANTLR end "ESC_SEQ"

        partial void EnterRule_OCTAL_ESC();
        partial void LeaveRule_OCTAL_ESC();

        // $ANTLR start "OCTAL_ESC"
        [GrammarRule("OCTAL_ESC")]
        private void mOCTAL_ESC()
        {
            EnterRule_OCTAL_ESC();
            EnterRule("OCTAL_ESC", 32);
            TraceIn("OCTAL_ESC", 32);
            try
            {
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:56:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
                int alt19 = 3;
                try
                {
                    DebugEnterDecision(19, false);
                    int LA19_1 = input.LA(1);

                    if ((LA19_1 == '\\'))
                    {
                        int LA19_2 = input.LA(2);

                        if (((LA19_2 >= '0' && LA19_2 <= '3')))
                        {
                            int LA19_3 = input.LA(3);

                            if (((LA19_3 >= '0' && LA19_3 <= '7')))
                            {
                                int LA19_4 = input.LA(4);

                                if (((LA19_4 >= '0' && LA19_4 <= '7')))
                                {
                                    alt19 = 1;
                                }
                                else
                                {
                                    alt19 = 2;
                                }
                            }
                            else
                            {
                                alt19 = 3;
                            }
                        }
                        else if (((LA19_2 >= '4' && LA19_2 <= '7')))
                        {
                            int LA19_3 = input.LA(3);

                            if (((LA19_3 >= '0' && LA19_3 <= '7')))
                            {
                                alt19 = 2;
                            }
                            else
                            {
                                alt19 = 3;
                            }
                        }
                        else
                        {
                            NoViableAltException nvae = new NoViableAltException("", 19, 1, input, 2);
                            DebugRecognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else
                    {
                        NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
                        DebugRecognitionException(nvae);
                        throw nvae;
                    }
                }
                finally { DebugExitDecision(19); }
                switch (alt19)
                {
                    case 1:
                        DebugEnterAlt(1);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:56:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
                        {
                            DebugLocation(56, 9);
                            Match('\\');
                            DebugLocation(56, 14);
                            input.Consume();

                            DebugLocation(56, 25);
                            input.Consume();

                            DebugLocation(56, 36);
                            input.Consume();


                        }
                        break;
                    case 2:
                        DebugEnterAlt(2);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:57:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
                        {
                            DebugLocation(57, 9);
                            Match('\\');
                            DebugLocation(57, 14);
                            input.Consume();

                            DebugLocation(57, 25);
                            input.Consume();


                        }
                        break;
                    case 3:
                        DebugEnterAlt(3);
                        // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:58:9: '\\\\' ( '0' .. '7' )
                        {
                            DebugLocation(58, 9);
                            Match('\\');
                            DebugLocation(58, 14);
                            input.Consume();


                        }
                        break;

                }
            }
            finally
            {
                TraceOut("OCTAL_ESC", 32);
                LeaveRule("OCTAL_ESC", 32);
                LeaveRule_OCTAL_ESC();
            }
        }
        // $ANTLR end "OCTAL_ESC"

        partial void EnterRule_UNICODE_ESC();
        partial void LeaveRule_UNICODE_ESC();

        // $ANTLR start "UNICODE_ESC"
        [GrammarRule("UNICODE_ESC")]
        private void mUNICODE_ESC()
        {
            EnterRule_UNICODE_ESC();
            EnterRule("UNICODE_ESC", 33);
            TraceIn("UNICODE_ESC", 33);
            try
            {
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:63:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:63:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
                {
                    DebugLocation(63, 9);
                    Match('\\');
                    DebugLocation(63, 14);
                    Match('u');
                    DebugLocation(63, 18);
                    mHEX_DIGIT();
                    DebugLocation(63, 28);
                    mHEX_DIGIT();
                    DebugLocation(63, 38);
                    mHEX_DIGIT();
                    DebugLocation(63, 48);
                    mHEX_DIGIT();

                }

            }
            finally
            {
                TraceOut("UNICODE_ESC", 33);
                LeaveRule("UNICODE_ESC", 33);
                LeaveRule_UNICODE_ESC();
            }
        }
        // $ANTLR end "UNICODE_ESC"

        partial void EnterRule_OPEN_BRACKET();
        partial void LeaveRule_OPEN_BRACKET();

        // $ANTLR start "OPEN_BRACKET"
        [GrammarRule("OPEN_BRACKET")]
        private void mOPEN_BRACKET()
        {
            EnterRule_OPEN_BRACKET();
            EnterRule("OPEN_BRACKET", 34);
            TraceIn("OPEN_BRACKET", 34);
            try
            {
                int _type = OPEN_BRACKET;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:66:2: ( '[' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:66:4: '['
                {
                    DebugLocation(66, 4);
                    Match('[');

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("OPEN_BRACKET", 34);
                LeaveRule("OPEN_BRACKET", 34);
                LeaveRule_OPEN_BRACKET();
            }
        }
        // $ANTLR end "OPEN_BRACKET"

        partial void EnterRule_CLOSED_BRACKET();
        partial void LeaveRule_CLOSED_BRACKET();

        // $ANTLR start "CLOSED_BRACKET"
        [GrammarRule("CLOSED_BRACKET")]
        private void mCLOSED_BRACKET()
        {
            EnterRule_CLOSED_BRACKET();
            EnterRule("CLOSED_BRACKET", 35);
            TraceIn("CLOSED_BRACKET", 35);
            try
            {
                int _type = CLOSED_BRACKET;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:68:2: ( ']' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:68:4: ']'
                {
                    DebugLocation(68, 4);
                    Match(']');

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("CLOSED_BRACKET", 35);
                LeaveRule("CLOSED_BRACKET", 35);
                LeaveRule_CLOSED_BRACKET();
            }
        }
        // $ANTLR end "CLOSED_BRACKET"

        partial void EnterRule_OPEN_PAR();
        partial void LeaveRule_OPEN_PAR();

        // $ANTLR start "OPEN_PAR"
        [GrammarRule("OPEN_PAR")]
        private void mOPEN_PAR()
        {
            EnterRule_OPEN_PAR();
            EnterRule("OPEN_PAR", 36);
            TraceIn("OPEN_PAR", 36);
            try
            {
                int _type = OPEN_PAR;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:70:2: ( '{' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:70:4: '{'
                {
                    DebugLocation(70, 4);
                    Match('{');

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("OPEN_PAR", 36);
                LeaveRule("OPEN_PAR", 36);
                LeaveRule_OPEN_PAR();
            }
        }
        // $ANTLR end "OPEN_PAR"

        partial void EnterRule_CLOSED_PAR();
        partial void LeaveRule_CLOSED_PAR();

        // $ANTLR start "CLOSED_PAR"
        [GrammarRule("CLOSED_PAR")]
        private void mCLOSED_PAR()
        {
            EnterRule_CLOSED_PAR();
            EnterRule("CLOSED_PAR", 37);
            TraceIn("CLOSED_PAR", 37);
            try
            {
                int _type = CLOSED_PAR;
                int _channel = DefaultTokenChannel;
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:72:2: ( '}' )
                DebugEnterAlt(1);
                // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:72:4: '}'
                {
                    DebugLocation(72, 4);
                    Match('}');

                }

                state.type = _type;
                state.channel = _channel;
            }
            finally
            {
                TraceOut("CLOSED_PAR", 37);
                LeaveRule("CLOSED_PAR", 37);
                LeaveRule_CLOSED_PAR();
            }
        }
        // $ANTLR end "CLOSED_PAR"

        public override void mTokens()
        {
            // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:8: ( T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | ID | INT | FLOAT | COMMENT | WS | STRING | CHAR | OPEN_BRACKET | CLOSED_BRACKET | OPEN_PAR | CLOSED_PAR )
            int alt20 = 32;
            try
            {
                DebugEnterDecision(20, false);
                try
                {
                    alt20 = dfa20.Predict(input);
                }
                catch (NoViableAltException nvae)
                {
                    DebugRecognitionException(nvae);
                    throw;
                }
            }
            finally { DebugExitDecision(20); }
            switch (alt20)
            {
                case 1:
                    DebugEnterAlt(1);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:10: T__20
                    {
                        DebugLocation(1, 10);
                        mT__20();

                    }
                    break;
                case 2:
                    DebugEnterAlt(2);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:16: T__21
                    {
                        DebugLocation(1, 16);
                        mT__21();

                    }
                    break;
                case 3:
                    DebugEnterAlt(3);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:22: T__22
                    {
                        DebugLocation(1, 22);
                        mT__22();

                    }
                    break;
                case 4:
                    DebugEnterAlt(4);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:28: T__23
                    {
                        DebugLocation(1, 28);
                        mT__23();

                    }
                    break;
                case 5:
                    DebugEnterAlt(5);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:34: T__24
                    {
                        DebugLocation(1, 34);
                        mT__24();

                    }
                    break;
                case 6:
                    DebugEnterAlt(6);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:40: T__25
                    {
                        DebugLocation(1, 40);
                        mT__25();

                    }
                    break;
                case 7:
                    DebugEnterAlt(7);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:46: T__26
                    {
                        DebugLocation(1, 46);
                        mT__26();

                    }
                    break;
                case 8:
                    DebugEnterAlt(8);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:52: T__27
                    {
                        DebugLocation(1, 52);
                        mT__27();

                    }
                    break;
                case 9:
                    DebugEnterAlt(9);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:58: T__28
                    {
                        DebugLocation(1, 58);
                        mT__28();

                    }
                    break;
                case 10:
                    DebugEnterAlt(10);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:64: T__29
                    {
                        DebugLocation(1, 64);
                        mT__29();

                    }
                    break;
                case 11:
                    DebugEnterAlt(11);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:70: T__30
                    {
                        DebugLocation(1, 70);
                        mT__30();

                    }
                    break;
                case 12:
                    DebugEnterAlt(12);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:76: T__31
                    {
                        DebugLocation(1, 76);
                        mT__31();

                    }
                    break;
                case 13:
                    DebugEnterAlt(13);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:82: T__32
                    {
                        DebugLocation(1, 82);
                        mT__32();

                    }
                    break;
                case 14:
                    DebugEnterAlt(14);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:88: T__33
                    {
                        DebugLocation(1, 88);
                        mT__33();

                    }
                    break;
                case 15:
                    DebugEnterAlt(15);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:94: T__34
                    {
                        DebugLocation(1, 94);
                        mT__34();

                    }
                    break;
                case 16:
                    DebugEnterAlt(16);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:100: T__35
                    {
                        DebugLocation(1, 100);
                        mT__35();

                    }
                    break;
                case 17:
                    DebugEnterAlt(17);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:106: T__36
                    {
                        DebugLocation(1, 106);
                        mT__36();

                    }
                    break;
                case 18:
                    DebugEnterAlt(18);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:112: T__37
                    {
                        DebugLocation(1, 112);
                        mT__37();

                    }
                    break;
                case 19:
                    DebugEnterAlt(19);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:118: T__38
                    {
                        DebugLocation(1, 118);
                        mT__38();

                    }
                    break;
                case 20:
                    DebugEnterAlt(20);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:124: T__39
                    {
                        DebugLocation(1, 124);
                        mT__39();

                    }
                    break;
                case 21:
                    DebugEnterAlt(21);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:130: T__40
                    {
                        DebugLocation(1, 130);
                        mT__40();

                    }
                    break;
                case 22:
                    DebugEnterAlt(22);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:136: ID
                    {
                        DebugLocation(1, 136);
                        mID();

                    }
                    break;
                case 23:
                    DebugEnterAlt(23);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:139: INT
                    {
                        DebugLocation(1, 139);
                        mINT();

                    }
                    break;
                case 24:
                    DebugEnterAlt(24);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:143: FLOAT
                    {
                        DebugLocation(1, 143);
                        mFLOAT();

                    }
                    break;
                case 25:
                    DebugEnterAlt(25);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:149: COMMENT
                    {
                        DebugLocation(1, 149);
                        mCOMMENT();

                    }
                    break;
                case 26:
                    DebugEnterAlt(26);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:157: WS
                    {
                        DebugLocation(1, 157);
                        mWS();

                    }
                    break;
                case 27:
                    DebugEnterAlt(27);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:160: STRING
                    {
                        DebugLocation(1, 160);
                        mSTRING();

                    }
                    break;
                case 28:
                    DebugEnterAlt(28);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:167: CHAR
                    {
                        DebugLocation(1, 167);
                        mCHAR();

                    }
                    break;
                case 29:
                    DebugEnterAlt(29);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:172: OPEN_BRACKET
                    {
                        DebugLocation(1, 172);
                        mOPEN_BRACKET();

                    }
                    break;
                case 30:
                    DebugEnterAlt(30);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:185: CLOSED_BRACKET
                    {
                        DebugLocation(1, 185);
                        mCLOSED_BRACKET();

                    }
                    break;
                case 31:
                    DebugEnterAlt(31);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:200: OPEN_PAR
                    {
                        DebugLocation(1, 200);
                        mOPEN_PAR();

                    }
                    break;
                case 32:
                    DebugEnterAlt(32);
                    // C:\\Users\\dhalachian\\source\\repos\\ILfQ\\ILfQ.Tools\\ilq.g:1:209: CLOSED_PAR
                    {
                        DebugLocation(1, 209);
                        mCLOSED_PAR();

                    }
                    break;

            }

        }


        #region DFA
        DFA9 dfa9;
        DFA20 dfa20;

        protected override void InitDFAs()
        {
            base.InitDFAs();
            dfa9 = new DFA9(this);
            dfa20 = new DFA20(this);
        }

        private class DFA9 : DFA
        {
            private const string DFA9_eotS =
                "\x5\xFFFF";
            private const string DFA9_eofS =
                "\x5\xFFFF";
            private const string DFA9_minS =
                "\x2\x2E\x3\xFFFF";
            private const string DFA9_maxS =
                "\x1\x39\x1\x65\x3\xFFFF";
            private const string DFA9_acceptS =
                "\x2\xFFFF\x1\x2\x1\x1\x1\x3";
            private const string DFA9_specialS =
                "\x5\xFFFF}>";
            private static readonly string[] DFA9_transitionS =
                {
                "\x1\x2\x1\xFFFF\xA\x1",
                "\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
                "",
                "",
                ""
            };

            private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
            private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
            private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
            private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
            private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
            private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
            private static readonly short[][] DFA9_transition;

            static DFA9()
            {
                int numStates = DFA9_transitionS.Length;
                DFA9_transition = new short[numStates][];
                for (int i = 0; i < numStates; i++)
                {
                    DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
                }
            }

            public DFA9(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 9;
                this.eot = DFA9_eot;
                this.eof = DFA9_eof;
                this.min = DFA9_min;
                this.max = DFA9_max;
                this.accept = DFA9_accept;
                this.special = DFA9_special;
                this.transition = DFA9_transition;
            }

            public override string Description { get { return "15:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

            public override void Error(NoViableAltException nvae)
            {
                DebugRecognitionException(nvae);
            }
        }

        private class DFA20 : DFA
        {
            private const string DFA20_eotS =
                "\x6\xFFFF\x3\x9\x1\xFFFF\x1\x1F\x11\xFFFF\x3\x9\x1\xFFFF\x1\x2B\x1\x2D" +
                "\x5\xFFFF\x3\x9\x6\xFFFF\x1\x9\x1\x34\x1\x35\x1\x36\x3\xFFFF";
            private const string DFA20_eofS =
                "\x37\xFFFF";
            private const string DFA20_minS =
                "\x1\x9\x1\x61\x4\xFFFF\x1\x61\x1\x75\x1\x72\x1\xFFFF\x1\x2E\xB\xFFFF" +
                "\x1\x74\x1\xFFFF\x1\x74\x1\x65\x1\x70\x1\xFFFF\x2\x6C\x1\x75\x1\xFFFF" +
                "\x2\x65\x2\xFFFF\x1\x72\x2\xFFFF\x1\x73\x1\x6C\x1\x65\x6\xFFFF\x1\x65" +
                "\x3\x30\x3\xFFFF";
            private const string DFA20_maxS =
                "\x1\x7D\x1\x72\x4\xFFFF\x1\x61\x1\x75\x1\x72\x1\xFFFF\x1\x65\xB\xFFFF" +
                "\x1\x74\x1\xFFFF\x1\x74\x1\x6F\x1\x72\x1\xFFFF\x2\x6C\x1\x75\x1\xFFFF" +
                "\x2\x65\x2\xFFFF\x1\x74\x2\xFFFF\x1\x73\x1\x6C\x1\x65\x6\xFFFF\x1\x65" +
                "\x3\x7A\x3\xFFFF";
            private const string DFA20_acceptS =
                "\x2\xFFFF\x1\xF\x1\x10\x1\x11\x1\x12\x3\xFFFF\x1\x16\x1\xFFFF\x1\x18" +
                "\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x1\x1\x2" +
                "\x1\xFFFF\x1\x5\x3\xFFFF\x1\xE\x3\xFFFF\x1\x17\x2\xFFFF\x1\x8\x1\x9\x1" +
                "\xFFFF\x1\xC\x1\xD\x3\xFFFF\x1\x4\x1\x3\x1\x7\x1\x6\x1\xA\x1\xB\x4\xFFFF" +
                "\x1\x14\x1\x15\x1\x13";
            private const string DFA20_specialS =
                "\x37\xFFFF}>";
            private static readonly string[] DFA20_transitionS =
                {
                "\x2\xD\x2\xFFFF\x1\xD\x12\xFFFF\x1\xD\x1\xFFFF\x1\xE\x1\xFFFF\x1\x1"+
                "\x2\xFFFF\x1\xF\x1\x2\x1\x3\x2\xFFFF\x1\x4\x1\xFFFF\x1\xB\x1\xC\xA\xA"+
                "\x1\x5\x6\xFFFF\x1A\x9\x1\x10\x1\xFFFF\x1\x11\x1\xFFFF\x1\x9\x1\xFFFF"+
                "\x5\x9\x1\x6\x7\x9\x1\x7\x5\x9\x1\x8\x6\x9\x1\x12\x1\xFFFF\x1\x13",
                "\x1\x14\x3\xFFFF\x1\x15\x1\xFFFF\x1\x16\x1\xFFFF\x1\x17\x2\xFFFF\x1"+
                "\x18\x1\xFFFF\x1\x19\x1\x1A\x2\xFFFF\x1\x1B",
                "",
                "",
                "",
                "",
                "\x1\x1C",
                "\x1\x1D",
                "\x1\x1E",
                "",
                "\x1\xB\x1\xFFFF\xA\xA\xB\xFFFF\x1\xB\x1F\xFFFF\x1\xB",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "\x1\x20",
                "",
                "\x1\x21",
                "\x1\x22\x3\xFFFF\x1\x23\x5\xFFFF\x1\x24",
                "\x1\x25\x1\xFFFF\x1\x26",
                "",
                "\x1\x27",
                "\x1\x28",
                "\x1\x29",
                "",
                "\x1\x2A",
                "\x1\x2C",
                "",
                "",
                "\x1\x2E\x1\xFFFF\x1\x2F",
                "",
                "",
                "\x1\x30",
                "\x1\x31",
                "\x1\x32",
                "",
                "",
                "",
                "",
                "",
                "",
                "\x1\x33",
                "\xA\x9\x7\xFFFF\x1A\x9\x4\xFFFF\x1\x9\x1\xFFFF\x1A\x9",
                "\xA\x9\x7\xFFFF\x1A\x9\x4\xFFFF\x1\x9\x1\xFFFF\x1A\x9",
                "\xA\x9\x7\xFFFF\x1A\x9\x4\xFFFF\x1\x9\x1\xFFFF\x1A\x9",
                "",
                "",
                ""
            };

            private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
            private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
            private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
            private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
            private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
            private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
            private static readonly short[][] DFA20_transition;

            static DFA20()
            {
                int numStates = DFA20_transitionS.Length;
                DFA20_transition = new short[numStates][];
                for (int i = 0; i < numStates; i++)
                {
                    DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
                }
            }

            public DFA20(BaseRecognizer recognizer)
            {
                this.recognizer = recognizer;
                this.decisionNumber = 20;
                this.eot = DFA20_eot;
                this.eof = DFA20_eof;
                this.min = DFA20_min;
                this.max = DFA20_max;
                this.accept = DFA20_accept;
                this.special = DFA20_special;
                this.transition = DFA20_transition;
            }

            public override string Description { get { return "1:1: Tokens : ( T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | ID | INT | FLOAT | COMMENT | WS | STRING | CHAR | OPEN_BRACKET | CLOSED_BRACKET | OPEN_PAR | CLOSED_PAR );"; } }

            public override void Error(NoViableAltException nvae)
            {
                DebugRecognitionException(nvae);
            }
        }


        #endregion

    }
}
